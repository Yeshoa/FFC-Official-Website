---
import App from '@layouts/App.astro';
import { getCollection } from 'astro:content';
import AchievementCard from '@components/members/AchievementCard.astro';
import { dynamicDefs } from '@lib/achievements/dynamics';
import { RARITIES } from '@lib/achievements/utils';
import AchievementCardBoosted from '@components/members/AchievementCardBoosted.astro';

// 1. Todos los achievements estáticos
const staticAchievements = (await getCollection('achievements')).map(a => ({
  id: a.data.id,
  name: a.data.name,
  icon: a.data.icon,
  description: a.data.description,
  rarity: a.data.rarity,
  category: a.data.category,
  unique: a.data.unique,
  visible: a.data.visible,
  enabled: a.data.enabled,
}));

// 2. Todos los achievements dinámicos (sin evaluar, solo definición)
const dynamicAchievements = dynamicDefs.map(a => ({
  id: a.id,
  name: a.name,
  icon: a.icon,
  description: a.description,
  rarity: a.rarity,
  category: a.category,
  unique: a.unique,
  visible: a.visible,
  enabled: a.enabled,
}));

// 3. Unir ambos arrays y eliminar duplicados por id y disabled
const allAchievements = [
  ...staticAchievements.filter(s => s.enabled),
  ...dynamicAchievements.filter(d => !staticAchievements.some(s => s.id === d.id) && d.enabled)
];

// 4. Ordenar por rareza según config.ts (de menor a mayor)
allAchievements.sort((a, b) => {
  if (a.rarity !== b.rarity) return a.rarity - b.rarity;
  return a.name.localeCompare(b.name);
});
---

<App title="FFC - Test: Todos los Achievements">
  <!-- <div class="container mx-auto p-4">
    <div class="flex flex-wrap items-center justify-center gap-4">
      {allAchievements.map((achv, idx) => (
        <AchievementCard achievement={achv} />
      ))}
    </div>
  </div> -->
  <div class="container mx-auto p-4">
    <div class="flex flex-wrap items-center justify-center gap-4">
      {allAchievements.map((achv, idx) => (
        <AchievementCardBoosted achievement={achv} />
      ))}
    </div>
  </div>
</App>