---
import App from '@layouts/App.astro';
import { getCollection } from 'astro:content';
import { dynamicDefs } from '@lib/achievements/dynamics';
import { type Achievement } from '@lib/achievements/dynamics/index';
import { CATEGORIES, SUBCATEGORIES, hierarchy } from '@lib/achievements/utils';
import AchievementCard from '@components/achievements/AchievementCard.astro';
import { getAchievementsForMember } from '@lib/achievements/dynamics';
import { Image } from 'astro:assets';

const memberCollection = await getCollection('members');

// Función para calcular el nivel en la jerarquía
const getHierarchyLevel = (id, hierarchy, visited = new Set()) => {
  if (!hierarchy[id] || hierarchy[id] === '' || visited.has(id)) return 0;
  visited.add(id);
  return 1 + getHierarchyLevel(hierarchy[id], hierarchy, visited);
};

// Función optimizada: calcular todos los logros una sola vez
const buildAchievementMembersMap = async (members) => {
  const memberAchievements = new Map();
  
  // Calcular logros para cada miembro una sola vez
  for (const member of members) {
    try {
      const achievements = await getAchievementsForMember(member.data.name);
      memberAchievements.set(member.data.name, achievements);
    } catch (error) {
      console.error(`Error getting achievements for ${member.data.name}:`, error);
      memberAchievements.set(member.data.name, []);
    }
  }
  
  // Invertir el mapa: de achievement -> miembros que lo tienen
  const achievementMembersMap = new Map();
  
  for (const [memberName, achievements] of memberAchievements) {
    const member = members.find(m => m.data.name === memberName);
    if (!member) continue;
    
    for (const achievement of achievements) {
      if (!achievementMembersMap.has(achievement.id)) {
        achievementMembersMap.set(achievement.id, []);
      }
      achievementMembersMap.get(achievement.id).push(member);
    }
  }
  
  return achievementMembersMap;
};

// 1. Todos los achievements estáticos
const staticAchievements = (await getCollection('achievements')).map(a => ({
  id: a.data.id,
  name: a.data.name,
  icon: a.data.icon,
  description: a.data.description,
  rarity: a.data.rarity,
  stars: a.data.stars,
  category: a.data.category,
  subcategory: a.data.subcategory,
  alignment: a.data.alignment,
  unique: a.data.unique,
  visible: a.data.visible,
  enabled: a.data.enabled,
}));

// 2. Todos los achievements dinámicos
const dynamicAchievements = dynamicDefs.map(a => ({
  id: a.id,
  name: a.name,
  icon: a.icon,
  description: a.description,
  rarity: a.rarity,
  stars: a.stars,
  category: a.category,
  subcategory: a.subcategory,
  alignment: a.alignment,
  unique: a.unique,
  visible: a.visible,
  enabled: a.enabled,

}));

// 3. Unir ambos arrays y eliminar duplicados por id y disabled
const allAchievements = [
  ...staticAchievements.filter(s => s.enabled),
  ...dynamicAchievements.filter(d => !staticAchievements.some(s => s.id === d.id) && d.enabled)
];

// 4. Construir el mapa de achievements -> miembros (una sola vez)
const achievementMembersMap = await buildAchievementMembersMap(memberCollection);

// 6. Mejorar el ordenamiento
allAchievements.sort((a, b) => {
  // Primero por rareza (más alto es más raro)
  if (a.rarity !== b.rarity) return b.rarity - a.rarity;
  
  // Luego por nivel de jerarquía
  const levelA = getHierarchyLevel(a.id, hierarchy);
  const levelB = getHierarchyLevel(b.id, hierarchy);
  if (levelA !== levelB) return levelB - levelA;
  
  // Finalmente por nombre
  return a.name.localeCompare(b.name);
});

// 7. Crear mapas de orden
const categoryOrder = CATEGORIES.reduce((acc, category, index) => {
  acc[category] = index;
  return acc;
}, {});

const subcategoryOrder = SUBCATEGORIES.reduce((acc, subcategory, index) => {
  acc[subcategory] = index;
  return acc;
}, { __default: SUBCATEGORIES.length });

// 8. Agrupar por categoría y subcategoría con información de miembros
const achievementsByCategory = {};

for (const achievement of allAchievements) {
  if (!achievementsByCategory[achievement.category]) {
    achievementsByCategory[achievement.category] = {};
  }
  if (!achievementsByCategory[achievement.category][achievement.subcategory]) {
    achievementsByCategory[achievement.category][achievement.subcategory] = [];
  }
  
  // Obtener miembros del mapa pre-calculado
  const membersWithAchievement = achievementMembersMap.get(achievement.id) || [];
  
  achievementsByCategory[achievement.category][achievement.subcategory].push({
    ...achievement,
    members: membersWithAchievement
  });
}

// 8. Ordenar categorías
const sortedCategories = Object.entries(achievementsByCategory).sort(([categoryA], [categoryB]) => {
  const orderA = categoryOrder[categoryA] ?? 999;
  const orderB = categoryOrder[categoryB] ?? 999;
  return orderA - orderB;
});

// 9. Ordenar subcategorías y achievements
const sortedAchievements = sortedCategories.map(([category, subcategories]) => {
  const sortedSubcategories = Object.entries(subcategories).sort(([subcategoryA], [subcategoryB]) => {
    const orderA = subcategoryOrder[subcategoryA] ?? subcategoryOrder.__default;
    const orderB = subcategoryOrder[subcategoryB] ?? subcategoryOrder.__default;
    return orderA - orderB;
  });

  const sortedSubcategoriesWithAchievements = sortedSubcategories.map(([subcategory, achievements]) => {
    const sortedAchievements = achievements.sort((a, b) => {
      const levelA = getHierarchyLevel(a.id, hierarchy);
      const levelB = getHierarchyLevel(b.id, hierarchy);
      if (levelA !== levelB) return levelB - levelA;
      
      // Ordenar por número de miembros que lo obtuvieron (opcional)
      if (a.members.length !== b.members.length) {
        return b.members.length - a.members.length;
      }
      
      return a.name.localeCompare(b.name);
    });
    return [subcategory, sortedAchievements];
  });

  return [category, sortedSubcategoriesWithAchievements];
});
---

<App title="FFC - Test: Todos los Achievements">
  <div class="container mx-auto p-4">
    {sortedAchievements.map(([category, subcategories]) => (
      <div class="category-section mb-8">
        <h2 class="text-3xl font-bold text-green-200 border-b-2 border-green-300 pb-2 mb-6">
          {category}
        </h2>
        
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {Array.isArray(subcategories) && subcategories.length > 0 ? (
            subcategories.map(([subcategory, achievements]) => (
              <div class="subcategory-section bg-green-900 rounded-lg" key={subcategory}>
                <h3 class="text-2xl font-semibold text-green-300 p-4 border-b border-green-700 mb-4">
                  {subcategory}
                  <span class="text-sm text-green-500 ml-2">({achievements.length})</span>
                </h3>
                
                <div class="p-4 space-y-4">
                  {achievements.map((achv) => (
                    <div class="achievement-item bg-green-950 rounded-lg p-4 hover:bg-green-800 transition-colors" key={achv.id}>
                      <div class="flex items-start justify-between mb-2">
                        <div class="flex items-center gap-2">
                          {achv.unique && (
                            <span class="text-xs px-2 py-1 rounded-full bg-purple-900 text-purple-300">
                              Único
                            </span>
                          )}
                        </div>
                      </div>
                      
                      <AchievementCard achievement={achv} />
                      
                      {/* Mostrar miembros que obtuvieron el logro */}
                      {achv.members && achv.members.length > 0 && (
                        <div class="mt-4 pt-4 border-t border-green-700">
                          <h4 class="text-sm font-medium text-green-400 mb-2">
                            Obtenido por ({achv.members.length}):
                          </h4>
                          <div class="flex flex-wrap gap-2">
                            {achv.members.map((member) => (
                              <div class="flex items-center gap-2 bg-green-800 rounded-full px-3 py-1" key={member.data.name}>
                                <Image 
                                  src={member.data.flagPath} 
                                  alt={`Bandera de ${member.data.name}`}
                                  height={15}
                                  class="rounded-sm"
                                />
                                <span class="text-sm text-green-300">{member.data.name}</span>
                              </div>
                            ))}
                          </div>
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              </div>
            ))
          ) : (
            <p class="text-gray-400 col-span-full text-center py-8">
              No hay subcategorías disponibles.
            </p>
          )}
        </div>
      </div>
    ))}
  </div>
</App>

<style>
.category-section {
  padding: 1.5rem 0;
}

.subcategory-section {
  transition: all 0.3s ease;
}

.subcategory-section:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 20px rgba(45, 135, 0, 0.3);
}

.achievement-item {
  transition: all 0.2s ease;
}

.achievement-item:hover {
  background-color: #004d0e;
}
</style>