---
import { getCollection, type CollectionEntry } from 'astro:content';
import { Image } from 'astro:assets';
import { getMemberImage } from '@lib/memberUtils';
import App from '@layouts/App.astro'; 
import Bracket from '@components/tournaments/Bracket.astro'; 
import Groups from '@components/tournaments/Groups.astro';
import KnockoutMatches from '@components/tournaments/KnockoutMatches.astro';
import TournamentGrid from '@components/tournaments/TournamentGrid.astro'; 
import TournamentStandings from '@components/tournaments/TournamentStandings.astro';
import { getMatchWinner } from '@lib/matchUtils.ts';
import TournamentHero from '@components/tournaments/TournamentHero.astro';
import Headlines from '@components/tournaments/Headlines.astro';

type Tournament = CollectionEntry<'tournaments'>['data'];
type Match = CollectionEntry<'matches'>['data'];
type Member = CollectionEntry<'members'>['data'];

const tournamentsCollection = await getCollection('tournaments');
// const matchesCollection = await getCollection('matches');
const matchesCollection = (await getCollection('matches'))
  .filter(match => match.slug.startsWith('forest-cup-2024/'));
const membersCollection = await getCollection('members');

const TOURNAMENT_ID = 2;
const tournamentEntry = tournamentsCollection.find(t => t.data.id === TOURNAMENT_ID);

if (!tournamentEntry) {
  // throw new Error(`Torneo con ID "${TOURNAMENT_ID}" no encontrado en la colección 'tournaments'.`);
  return Astro.redirect('/404');
}

const FC2024Data = tournamentEntry.data;
const { Content } = await tournamentEntry.render();

// Matches
const fc2024Matches = matchesCollection
  /* .filter(match => match.data.tournament_id === TOURNAMENT_ID) */
  .sort((a, b) => a.data.date.getTime() - b.data.date.getTime()); // Ordenar por fecha
const knockoutMatches = fc2024Matches.filter(match => match.data.stage === 'knockout');

// Imagenes
import FC24Logo from '@images/tournaments/2024/banner.png'; 
import AllGoalsHero from '@images/tournaments/2024/all-goals.png';
import FinalMatch from '@images/tournaments/2024/final-match.png';
import NysnubShow from '@images/tournaments/2024/nysnub-show.png';
import LongestPenalty from '@images/tournaments/2024/longest-penalty.png';
import BestGoal from '@images/tournaments/2024/best-goal.png';
import MVPTarasov from '@images/tournaments/2024/mvp-tarasov.png';
import TournamentStats from '@components/tournaments/TournamentStats.astro';

// Función auxiliar para encontrar los partidos de una fixture específica (si es necesario)
// Nota: Esto puede ser complejo si la estructura de `FC2024Data` no coincide perfectamente
// con cómo quieres mostrar los partidos de `fc2024Matches`.
const getMatchesForFixture = (stageName?: string, groupName?: string, fixtureName?: string) => {
    return fc2024Matches.filter(m =>
        (!stageName || m.data.stage === stageName) &&
        (!groupName || m.data.group === groupName) &&
        (!fixtureName || m.data.fixture === fixtureName)
    );
}
const headlines = [
  {
    title: 'Revive the Final',
    image: FinalMatch,
    link: 'https://www.youtube.com/live/XJPwf45Eh4w?si=8Akzbug1jY6sOFv9&t=297',
    noblank: true,
  },
  {
    title: 'Watch All Goals',
    image: AllGoalsHero,
    link: 'https://www.youtube.com/watch?v=iddBpQbe7ak',
    noblank: true,
  },
  {
    title: 'Tarasov wins the Golden Ball',
    image: MVPTarasov,
    link: '#prizes',
    noblank: false,
  },
  {
    title: 'Nysnub Show: 4 goals in one match',
    image: NysnubShow,
    link: 'https://youtube.com/shorts/vzUKv51dzuU',
    class: 'object-top',
    noblank: true,
  },
  {
    title: 'Cacusia outstanding play',
    image: BestGoal,
    link: 'https://youtube.com/clip/UgkxhC53IxiU-6hjxn5H_XDy_XJsLO-ki5wE?si=c3TqUN6alOi30lv2',
    noblank: true,
  },
  {
    title: 'Longest penalty shootout ever!',
    image: LongestPenalty,
    link: 'https://youtube.com/clip/UgkxpY5l94Lpkwctfl8yymRpTlVJimy-HAQN?si=mt_yHADNDHSYjEXZ',
    noblank: true,
  },
]

const pageTitle = `FFC - ${FC2024Data.name || 'Forest Cup'}`;
const winner = getMatchWinner(getMatchesForFixture('knockout', undefined, 'Final')[0].data); 
---

<App title={pageTitle}>
  <main class="flex flex-col items-center relative">
    <div class="flex flex-col justify-center items-center w-full bg-gradient-to-b from-transparent to-green-900/80">
      <TournamentGrid currentTournament={FC2024Data}/>
      <TournamentHero currentTournament={FC2024Data} members={membersCollection} />
    </div>
    <!-- News -->
    <Headlines headlines={headlines}/>
    
    <TournamentStats
    tournament={tournamentEntry}
    matches={fc2024Matches}
    members={membersCollection}
    />
    <Groups
    matches={fc2024Matches}
    members={membersCollection}
    />
    <KnockoutMatches
    knockoutMatches={knockoutMatches}
    members={membersCollection}
    />
    <!-- <div class="flex flex-col justify-center items-center w-full gap-4">
      <Bracket matches={fc2024Matches} members={membersCollection} />
    </div> -->
    <!-- <div class="prose dark:prose-invert bg-white dark:bg-green-900 shadow-lg rounded-lg p-6 my-8 w-full max-w-4xl mx-auto">
       <h2 class="text-2xl font-semibold mb-4 text-gray-900 dark:text-white border-b pb-2 border-gray-200 dark:border-green-600">Tournament Notes</h2>
       <Content />
    </div> -->

    <div class="w-full flex flex-col items-center px-6">
      <TournamentStandings
      tournament={tournamentEntry}
      matches={fc2024Matches}
      members={membersCollection.filter(member => FC2024Data.participants.includes(member.data.name))}
      />
    </div>
  </main>
</App>