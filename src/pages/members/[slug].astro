---
import { getCollection, type CollectionEntry, getEntry } from 'astro:content';
import { Image } from 'astro:assets';
import { getMemberRank, getMemberByName } from '@lib/memberUtils';
import { getMemberTotalScore } from '@lib/rankingUtils';
import { getAchievementsForMember } from '@lib/achievements/dynamics/index';
import App from '@layouts/App.astro';
import ScorersTable from '@components/tournaments/ScorersTable.astro';
import MatchCard from '@components/MatchCard.astro';
import RecordsAndStats from '@components/members/RecordsAndStats.astro';
import TournamentParticipationTable from '@components/members/TournamentParticipationTable.astro';
import MemberHero from '@components/members/MemberHero.astro';
import { CURRENT_TOURNAMENT_ID } from '@lib/tournamentUtils';

export const prerender = true;

type MemberType = CollectionEntry<'members'>;

interface Props {
  member: MemberType;
}

export async function getStaticPaths() {
  const members = await getCollection('members');
  return members.map((member: MemberType) => {
    return {
      params: { slug: member.slug }, 
      props: { member }, 
    };
  });
}

// --- Parámetro de URL y Miembro Actual ---
const { member } = Astro.props;

if (!member) {
  return Astro.redirect('/404');
  // throw new Error(`Miembro con slug "${Astro.params.slug}" no encontrado.`);
}

//const member = member.data;
const { Content } = await member.render(); // Obtener el componente para renderizar el Markdown
const memberData = member.data;

const matches = await getCollection('matches');
const tournaments = await getCollection('tournaments');
const members = await getCollection('members');

// Filtra partidos jugados donde el miembro actual es team1 o team2
const playedMatches = matches
  .filter(match => match.data.status === 'played' && (match.data.team1 === memberData.name || match.data.team2 === memberData.name))
  .map(match => {
    // Calcula el marcador basado en los goles
    const score1 = match.data.goals?.filter(g => g.team === match.data.team1).length ?? 0;
    const score2 = match.data.goals?.filter(g => g.team === match.data.team2).length ?? 0;
    // Determina si hubo penales y el resultado
    let penaltyScore1 = 0;
    let penaltyScore2 = 0;
    let penaltiesInfo = '';
    if (match.data.penalties && match.data.penalties.length > 0) {
        penaltyScore1 = match.data.penalties.filter(p => p.team === match.data.team1 && p.scored).length;
        penaltyScore2 = match.data.penalties.filter(p => p.team === match.data.team2 && p.scored).length;
        penaltiesInfo = `(${penaltyScore1}-${penaltyScore2} p)`;
    }

    return {
      ...match.data,
      score1,
      score2,
      penaltiesInfo
    };
  });
  
playedMatches.sort((a, b) => b.date.getTime() - a.date.getTime());

// --- Lógica para Head-to-Head (H2H) ---
interface H2HStats {
  difference: number;
  played: number;
  wins: number;
  draws: number;
  losses: number;
  goalsFor: number;
  goalsAgainst: number;
}

const h2hStats: Record<string, H2HStats> = {};

playedMatches.forEach(match => {
  const opponentName = match.team1 === memberData.name ? match.team2 : match.team1;
  if (!opponentName) return; // Saltar si falta un oponente

  // Inicializar estadísticas si es el primer encuentro contra este oponente
  if (!h2hStats[opponentName]) {
    h2hStats[opponentName] = { difference: 0, played: 0, wins: 0, draws: 0, losses: 0, goalsFor: 0, goalsAgainst: 0 };
  }

  // Actualizar estadísticas
  h2hStats[opponentName].played++;
  let memberScore = 0;
  let opponentScore = 0;

  if (match.team1 === memberData.name) {
    memberScore = match.score1;
    opponentScore = match.score2;
  } else {
    memberScore = match.score2;
    opponentScore = match.score1;
  }

  h2hStats[opponentName].goalsFor += memberScore;
  h2hStats[opponentName].goalsAgainst += opponentScore;

  if (memberScore > opponentScore) {
    h2hStats[opponentName].wins++;
    h2hStats[opponentName].difference++;
  } else if (memberScore < opponentScore) {
    h2hStats[opponentName].losses++;
    h2hStats[opponentName].difference--;
  } else {
    // Empate sin penales
    h2hStats[opponentName].draws++;
  }
});

const memberRank = getMemberRank(member, members, matches, tournaments, CURRENT_TOURNAMENT_ID);
const memberTotalScore = getMemberTotalScore(member, tournaments, matches, CURRENT_TOURNAMENT_ID).totalScore;
//Get championships won by member
const titles = tournaments
  .filter(t => t.data.champion === memberData.name)
  .map(t => ({ year: t.data.edition }));

const hasContent = member?.body && member.body.trim() !== '';
const achievements = await getAchievementsForMember(memberData.name);

---
<App title={`FFC - ${memberData.name}`}>
  <div class="md:container m-auto p-4 py-8">
    <MemberHero memberData={memberData} ranking={memberRank} points={memberTotalScore} titles={titles} achievements={achievements} />
    <!-- <MemberHero name={memberData.name} logoUrl={memberData.logoPath} flagUrl={memberData.flagPath} ranking={memberRank} points={memberTotalScore} founded={memberData.founded} affiliation={memberData.affiliation} fedDispatch={memberData.feddispatch} titles={[{year: 2020}]} achievements={[{id: '1', iconUrl: Icon, label: 'King'}]} /> -->

    <TournamentParticipationTable 
    member={member} 
    tournaments={tournaments} 
    matches={matches} 
    members={members} 
    type="forest-cup" 
    />
    
    {/* Matches and Stats*/}
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
      {/* Last Played */}
      <div class="bg-green-950/80 shadow-lg rounded-lg p-6">
        <h2 class="text-2xl font-semibold mb-4 text-white border-b pb-2 border-green-600">Last Matches Played</h2>
        {playedMatches.length > 0 ? (
          <div class="space-y-4">
            {playedMatches.map((match) => {
              const tournament = tournaments.find(t => t.data.id === match.tournament_id);
              const tournamentUrl = tournament ? `/${tournament.data.type}/${tournament.data.edition}` : '';
              const tournamentName = tournament?.data.name ?? '';
              return(
              <span class="text-sm text-gray-300 ml-3">
                <a href={tournamentUrl} class="hover:underline">{tournamentName}</a>
                {match.group ? ` - Group ${match.group}` : ''}
                {match.fixture ? ` - ${match.fixture}` : ''}
              </span>
              <MatchCard match={match} members={members} />
            )}).slice(0, 8)}
          </div>
        ) : (
          <p class="text-gray-400 italic">This National Team hasn't played any matches yet.</p>
        )}
      </div>

      {/* Stats */}
      <div class="bg-green-950/80 shadow-lg rounded-lg p-6">
        <h2 class="text-2xl font-semibold mb-4 text-white border-b pb-2 border-green-600">Historic Head-to-Head</h2>
        {Object.keys(h2hStats).length > 0 ? (
          <div class="overflow-x-auto pb-0">
            <table class="min-w-full border border-green-700 overflow-hidden rounded-lg text-sm">
              <thead>
                <tr class="bg-green-800 text-white">
                  <th scope="col" class="px-4 py-2 text-left tracking-wider">Opponent</th>
                  <th scope="col" class="px-1 py-2 text-center tracking-wider" title="Difference">Dif</th>
                  <th scope="col" class="px-1 py-2 text-center tracking-wider" title="Matches Played">Pld</th>
                  <th scope="col" class="px-1 py-2 text-center tracking-wider" title="Wins">W</th>
                  <th scope="col" class="px-1 py-2 text-center tracking-wider" title="Draws">D</th>
                  <th scope="col" class="px-1 py-2 text-center tracking-wider" title="Losses">L</th>
                  <th scope="col" class="px-1 py-2 text-center tracking-wider" title="Goals for">GF</th>
                  <th scope="col" class="px-1 py-2 text-center tracking-wider" title="Goals against">GA</th>
                  <th scope="col" class="px-1 py-2 text-center tracking-wider" title="Goal difference">GD</th>
                </tr>
              </thead>
              <tbody>
                {Object.entries(h2hStats)
                .sort(([, a], [, b]) => {
                  // partidos jugados
                  if (b.played !== a.played) return b.played - a.played;

                  // más victorias
                  if (b.wins !== a.wins) return b.wins - a.wins;

                  // diferencia de goles
                  const diffA = a.goalsFor - a.goalsAgainst;
                  const diffB = b.goalsFor - b.goalsAgainst;
                  if (diffB !== diffA) return diffB - diffA;
                  
                  // goles a favor
                  return b.goalsFor - a.goalsFor;
                })
                .map(([opponentName, stats]) => {
                  const opponentData = getMemberByName(opponentName, members);
                  return(
                  <tr key={opponentName} 
                  class="border-b border-green-700 hover:bg-green-900/30 transition duration-150">
                    <td class="px-4 py-2 whitespace-nowrap font-medium text-white">
                      <a href={`/members/${opponentData?.slug}`} class="flex items-center gap-2 hover:underline truncate">
                      <Image
                        src={opponentData?.data.flagPath}
                        alt={opponentName}
                        class="w-6 h-4 object-cover rounded" height={36}
                        loading="lazy" quality={10} format="webp"
                      />{opponentName}
                      </a>
                    </td>
                    <td class={`px-1 py-2 whitespace-nowrap text-center text-green-200 font-bold
                    ${
                      stats.difference > 0
                        ? 'text-green-400'
                        : stats.difference < 0
                        ? 'text-red-400'
                        : 'text-gray-300'
                    }`}
                    >{stats.difference === 0 ? '-' : stats.difference > 0 ? `+${stats.difference}` : stats.difference}</td>
                    <td class="px-1 py-2 whitespace-nowrap text-center text-green-200">{stats.played}</td>
                    <td class="px-1 py-2 whitespace-nowrap text-center text-green-400">{stats.wins}</td>
                    <td class="px-1 py-2 whitespace-nowrap text-center text-yellow-400">{stats.draws}</td>
                    <td class="px-1 py-2 whitespace-nowrap text-center text-red-400">{stats.losses}</td>
                    <td class="px-1 py-2 whitespace-nowrap text-center text-green-200">{stats.goalsFor}</td>
                    <td class="px-1 py-2 whitespace-nowrap text-center text-green-200">{stats.goalsAgainst}</td>
                    <td class="px-1 py-2 whitespace-nowrap text-center text-green-200">{stats.goalsFor - stats.goalsAgainst}</td>
                  </tr>
                )})}
              </tbody>
            </table>
          </div>
        ) : (
          <p class="text-gray-400 italic">There are no stats to show for this National Team</p>
        )}
        <section class="flex justify-center items-center flex-col">
          <ScorersTable members={members.filter(m => m.slug === member.slug)} matches={playedMatches} />
        </section>
      </div>
    </div>
    <RecordsAndStats member={member} matches={playedMatches} members={members}/>
  </div>
</App>
