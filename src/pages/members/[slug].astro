---
import { getCollection, type CollectionEntry, getEntry } from 'astro:content';
import { Image } from 'astro:assets';
import { getMemberImage, getMemberLogo, getMemberTotalScore, getMemberRank } from '../../lib/memberUtils';
import App from '../../layouts/App.astro';
import ScorersTable from '../../components/tournaments/ScorersTable.astro';
import MatchCard from '../../components/MatchCard.astro';
import RecordsAndStats from '../../components/members/RecordsAndStats.astro';
import TournamentParticipationTable from '../../components/members/TournamentParticipationTable.astro';
import { getMemberImageLazy } from '../../lib/memberUtilsLazy';
import { getAllMatchesByTeam } from '../../lib/matchUtils';
import { undefined } from 'astro:schema';

export const prerender = true;

type MemberType = CollectionEntry<'members'>;

interface Props {
  member: MemberType;
}

export async function getStaticPaths() {
  const members = await getCollection('members');
  return members.map((member: MemberType) => {
    return {
      params: { slug: member.slug }, 
      props: { member }, 
    };
  });
}

// --- Parámetro de URL y Miembro Actual ---
const { member } = Astro.props;

if (!member) {
  return Astro.redirect('/404');
  // throw new Error(`Miembro con slug "${Astro.params.slug}" no encontrado.`);
}

//const member = member.data;
const { Content } = await member.render(); // Obtener el componente para renderizar el Markdown
const memberData = member.data;

const matches = await getCollection('matches');
const tournaments = await getCollection('tournaments');
const members = await getCollection('members');

// Filtra partidos jugados donde el miembro actual es team1 o team2
const playedMatches = matches
  .filter(match => match.data.status === 'played' && (match.data.team1 === memberData.name || match.data.team2 === memberData.name))
  .map(match => {
    // Calcula el marcador basado en los goles
    const score1 = match.data.goals?.filter(g => g.team === match.data.team1).length ?? 0;
    const score2 = match.data.goals?.filter(g => g.team === match.data.team2).length ?? 0;
    // Determina si hubo penales y el resultado
    let penaltyScore1 = 0;
    let penaltyScore2 = 0;
    let penaltiesInfo = '';
    if (match.data.penalties && match.data.penalties.length > 0) {
        penaltyScore1 = match.data.penalties.filter(p => p.team === match.data.team1 && p.scored).length;
        penaltyScore2 = match.data.penalties.filter(p => p.team === match.data.team2 && p.scored).length;
        penaltiesInfo = `(${penaltyScore1}-${penaltyScore2} p)`;
    }

    return {
      ...match.data,
      score1,
      score2,
      penaltiesInfo
    };
  });
  
playedMatches.sort((a, b) => b.date.getTime() - a.date.getTime());

// --- Lógica para Head-to-Head (H2H) ---
interface H2HStats {
  difference: number;
  played: number;
  wins: number;
  draws: number;
  losses: number;
  goalsFor: number;
  goalsAgainst: number;
}

const h2hStats: Record<string, H2HStats> = {};

playedMatches.forEach(match => {
  const opponentName = match.team1 === memberData.name ? match.team2 : match.team1;
  if (!opponentName) return; // Saltar si falta un oponente

  // Inicializar estadísticas si es el primer encuentro contra este oponente
  if (!h2hStats[opponentName]) {
    h2hStats[opponentName] = { difference: 0, played: 0, wins: 0, draws: 0, losses: 0, goalsFor: 0, goalsAgainst: 0 };
  }

  // Actualizar estadísticas
  h2hStats[opponentName].played++;
  let memberScore = 0;
  let opponentScore = 0;

  if (match.team1 === memberData.name) {
    memberScore = match.score1;
    opponentScore = match.score2;
  } else {
    memberScore = match.score2;
    opponentScore = match.score1;
  }

  h2hStats[opponentName].goalsFor += memberScore;
  h2hStats[opponentName].goalsAgainst += opponentScore;

  if (memberScore > opponentScore) {
    h2hStats[opponentName].wins++;
    h2hStats[opponentName].difference++;
  } else if (memberScore < opponentScore) {
    h2hStats[opponentName].losses++;
    h2hStats[opponentName].difference--;
  } else {
    // Empate sin penales
    h2hStats[opponentName].draws++;
  }
});

const flagImage = getMemberImage(memberData.name, members);
const logoImage = getMemberLogo(memberData.name, members);

const memberRank = getMemberRank(memberData.name, members);
const memberTotalScore = getMemberTotalScore(member);

const hasContent = member?.body && member.body.trim() !== '';
---
<App title={`FFC - ${memberData.name}`}>
  <div class="container mx-auto px-4 py-8">
    {/* Profile*/}
    <div class="bg-green-950/80 shadow-lg rounded-lg p-6 mb-8 flex flex-col md:flex-row items-center gap-6">
      {/* Logos and Info */}
      <div class="flex flex-col items-center md:items-start gap-2">
        <div class="flex gap-4 items-center">
          {flagImage && (
            <Image
              src={flagImage}
              alt={`${memberData.name}'s flag'`}
              class="h-16 w-auto md:h-20 object-contain rounded border border-green-700"
              width={128}
              height={128}
              loading="eager"
            />
          )}
        </div>
        
        <!-- Nombre -->
        <h1 class="text-3xl md:text-4xl font-bold text-white text-center md:text-left break-words max-w-56 flex items-center gap-2">
          {memberData.name}
        </h1>
        
        
        <!-- Código y puntos -->
        <div class="flex flex-col md:flex-row items-center md:items-start text-center md:text-left w-full">
          <p class="text-lg text-gray-400">({memberData.code})</p>
          {memberData.verified && (
            <div class="ml-1 relative group">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="currentColor"
                class="text-green-400"
                title="This member is verified"
              >
                <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                <path d="M12.01 2.011a3.2 3.2 0 0 1 2.113 .797l.154 .145l.698 .698a1.2 1.2 0 0 0 .71 .341l.135 .008h1a3.2 3.2 0 0 1 3.195 3.018l.005 .182v1c0 .27 .092 .533 .258 .743l.09 .1l.697 .698a3.2 3.2 0 0 1 .147 4.382l-.145 .154l-.698 .698a1.2 1.2 0 0 0 -.341 .71l-.008 .135v1a3.2 3.2 0 0 1 -3.018 3.195l-.182 .005h-1a1.2 1.2 0 0 0 -.743 .258l-.1 .09l-.698 .697a3.2 3.2 0 0 1 -4.382 .147l-.154 -.145l-.698 -.698a1.2 1.2 0 0 0 -.71 -.341l-.135 -.008h-1a3.2 3.2 0 0 1 -3.195 -3.018l-.005 -.182v-1a1.2 1.2 0 0 0 -.258 -.743l-.09 -.1l-.697 -.698a3.2 3.2 0 0 1 -.147 -4.382l.145 -.154l.698 -.698a1.2 1.2 0 0 0 .341 -.71l.008 -.135v-1l.005 -.182a3.2 3.2 0 0 1 3.013 -3.013l.182 -.005h1a1.2 1.2 0 0 0 .743 -.258l.1 -.09l.698 -.697a3.2 3.2 0 0 1 2.269 -.944zm3.697 7.282a1 1 0 0 0 -1.414 0l-3.293 3.292l-1.293 -1.292l-.094 -.083a1 1 0 0 0 -1.32 1.497l2 2l.094 .083a1 1 0 0 0 1.32 -.083l4 -4l.083 -.094a1 1 0 0 0 -.083 -1.32z"/>
              </svg>
              <div class="absolute left-1/2 -translate-x-1/2 top-full mt-1 z-10 opacity-0 group-hover:opacity-100 transition-opacity duration-300 bg-green-800 text-white text-xs rounded px-3 py-1 shadow-lg whitespace-nowrap">
                This member is verified
              </div>
            </div>
          )}
        </div>
        
        <!-- Ranking (abajo del todo) -->
        <div class="text-center md:text-left w-full">
          <p class="text-sm text-gray-400">Rank</p>
          <div class="flex items-end justify-between w-full">
            <p class={`text-4xl font-bold 
            ${memberRank === 1 ? 'text-amber-400' 
            : memberRank === 2 ? 'text-slate-300' 
            : memberRank === 3 ? 'text-yellow-600' 
            : 'text-green-400'} 
            `}>{!member.data.verified ? 'N/A' : memberRank}°</p>
            <p class="text-2xl font-semibold text-green-300">{memberTotalScore} Pts.</p>
          </div>
        </div>
      </div>
      <div class="flex flex-col items-center md:items-start gap-4">
        {logoImage && (
          <Image
            src={logoImage}
            alt={`${memberData.federation || memberData.name}'s Logo'`}
            class="w-16 h-auto md:w-48 object-contain rounded"
            width={256}
            height={256}
            loading="eager"
          />
        )}
      </div>
      {/* Details */}
      <div class="flex-grow grid grid-cols-1 sm:grid-cols-2 gap-4 text-sm md:text-base">
        {/* If feddispatch is present, use anchor */}
        {memberData.feddispatch ? (
          <a
            href={memberData.feddispatch}
            target="_blank"
            rel="noopener noreferrer"
            class="bg-gradient-to-br from-green-800 via-green-900 to-green-950 hover:bg-gradient-to-br hover:from-green-700 hover:via-green-800 hover:to-green-900 p-3 rounded-md"
          >
            {memberData.federation ? (
              <p class="text-white font-bold">{memberData.federation}</p>
            ) : (
              <span class="ml-1 text-gray-400 italic">This nation doesn't have a federation</span>
            )}
          </a>
        ) : (
          <div class="bg-gradient-to-br from-green-800 via-green-900 to-green-950 p-3 rounded-md">
            {memberData.federation ? (
              <span class="ml-1 text-gray-200">{memberData.federation}</span>
            ) : (
              <span class="ml-1 text-gray-400 italic">This nation doesn't have a federation</span>
            )}
          </div>
        )}
        
        <div class="bg-gradient-to-br from-green-800 via-green-900 to-green-950 p-3 rounded-md">
          <span class="font-semibold text-gray-300">Region:</span>
          <span class="ml-1 text-white font-bold">{memberData.region || <span class="italic text-gray-400">N/A</span>}</span>
        </div>
        <a href={memberData.nslink} target="_blank" rel="noopener noreferrer" class="bg-gradient-to-br from-green-800 via-green-900 to-green-950 hover:bg-gradient-to-br hover:from-green-700 hover:via-green-800 hover:to-green-900 p-3 rounded-md">
          <p class="text-white font-bold">
            NationStates Profile 🔗
          </p>
        </a>
        <div class="bg-gradient-to-br from-green-800 via-green-900 to-green-950 p-3 rounded-md">
          <span class="font-semibold text-gray-300">Founded:</span>
          <span class="ml-1 text-white font-bold">{memberData.founded || <span class="italic text-gray-400">N/A</span>}</span>
        </div>
        <div class="bg-gradient-to-br from-green-800 via-green-900 to-green-950 p-3 rounded-md">
          <span class="font-semibold text-gray-300">FFC Affiliation:</span>
          <span class="ml-1 text-white font-bold">{memberData.affiliation || <span class="italic text-gray-400">N/A</span>}</span>
        </div>
      </div>
    </div>

    {/* Markdown Content */}
    <!-- {hasContent && (<div class="prose-invert max-w-full bg-green-950/80 shadow-lg rounded-lg p-6 mb-8">
      <h2 class="text-2xl font-semibold mb-4 text-white border-b pb-2 border-green-600">About {memberData.federation || memberData.name}</h2>
      <div class="space-y-4"><Content /></div>
    </div>)} -->

    {/* Squad */}
    {member.data.squad && (
      <section class="bg-green-950/80 rounded-xl p-6 mb-8 text-white">
        <h2 class="text-2xl font-bold mb-4 border-b border-green-600 pb-2">{memberData.name} Squad</h2>
    
        {/* Información general */}
        <div class="flex flex-col md:flex-row justify-between mb-4 text-sm text-green-300">
          <p><span class="font-semibold text-white">Coach:</span> {member.data.squad.coach ?? "Unknown"}</p>
          <p><span class="font-semibold text-white">Preferred Formation:</span> {member.data.squad.formation ?? "Not declared"}</p>
        </div>
    
        {/* Jugadores */}
        {member.data.squad.players && member.data.squad.players.length > 0 ? (
          <div class="overflow-x-auto rounded-md border border-green-700">
            <table class="min-w-full table-auto text-sm text-left">
              <thead class="bg-green-800 text-white uppercase text-xs">
                <tr>
                  <th class="px-3 py-2">#</th>
                  <th class="px-3 py-2">Name</th>
                  <th class="px-3 py-2">Position</th>
                </tr>
              </thead>
              <tbody class="text-white">
                {member.data.squad.players.map(player => (
                  <tr class="border-b border-green-700 hover:bg-green-900/30 transition duration-150">
                    <td class="px-3 py-2 font-bold">{player.number}</td>
                    <td class="px-3 py-2">{player.name}</td>
                    <td class="px-3 py-2">{player.position}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        ) : (
          <p class="italic text-gray-400">No players available for this squad.</p>
        )}
      </section>
    )}

    <TournamentParticipationTable 
    member={member} 
    tournaments={tournaments} 
    matches={matches} 
    members={members} 
    type="forest-cup" 
    />
    
    {/* Matches and Stats*/}
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
      {/* Last Played */}
      <div class="bg-green-950/80 shadow-lg rounded-lg p-6">
        <h2 class="text-2xl font-semibold mb-4 text-white border-b pb-2 border-green-600">Last Matches Played</h2>
        {playedMatches.length > 0 ? (
          <div class="space-y-4">
            {playedMatches.map((match) => {
              const tournament = tournaments.find(t => t.data.id === match.tournament_id);
              const tournamentUrl = tournament ? `/${tournament.data.type}/${tournament.data.edition}` : '';
              const tournamentName = tournament?.data.name ?? '';
              return(
              <span class="text-sm text-gray-300 ml-3">
                <a href={tournamentUrl} class="hover:underline">{tournamentName}</a>
                {match.group ? ` - Group ${match.group}` : ''}
                {match.fixture ? ` - ${match.fixture}` : ''}
              </span>
              <MatchCard match={match} members={members} />
            )}).slice(0, 8)}
          </div>
        ) : (
          <p class="text-gray-400 italic">This National Team hasn't played any matches yet.</p>
        )}
      </div>

      {/* Stats */}
      <div class="bg-green-950/80 shadow-lg rounded-lg">
        {Object.keys(h2hStats).length > 0 ? (
          <div class="overflow-x-auto p-6 pb-0">
            <h2 class="text-2xl font-semibold mb-4 text-white border-b pb-2 border-green-600">Historic Head-to-Head</h2>
            <table class="min-w-full border border-green-700 overflow-hidden rounded-lg text-sm">
              <thead>
                <tr class="bg-green-800 text-white">
                  <th scope="col" class="px-4 py-2 text-left tracking-wider">Opponent</th>
                  <th scope="col" class="px-1 py-2 text-center tracking-wider" title="Difference">Dif</th>
                  <th scope="col" class="px-1 py-2 text-center tracking-wider" title="Matches Played">Pld</th>
                  <th scope="col" class="px-1 py-2 text-center tracking-wider" title="Wins">W</th>
                  <th scope="col" class="px-1 py-2 text-center tracking-wider" title="Draws">D</th>
                  <th scope="col" class="px-1 py-2 text-center tracking-wider" title="Losses">L</th>
                  <th scope="col" class="px-1 py-2 text-center tracking-wider" title="Goals for">GF</th>
                  <th scope="col" class="px-1 py-2 text-center tracking-wider" title="Goals against">GA</th>
                  <th scope="col" class="px-1 py-2 text-center tracking-wider" title="Goal difference">GD</th>
                </tr>
              </thead>
              <tbody>
                {Object.entries(h2hStats)
                .sort(([, a], [, b]) => {
                  // partidos jugados
                  if (b.played !== a.played) return b.played - a.played;

                  // más victorias
                  if (b.wins !== a.wins) return b.wins - a.wins;

                  // diferencia de goles
                  const diffA = a.goalsFor - a.goalsAgainst;
                  const diffB = b.goalsFor - b.goalsAgainst;
                  if (diffB !== diffA) return diffB - diffA;

                  // goles a favor
                  return b.goalsFor - a.goalsFor;
                })
                .map(([opponentName, stats]) => (
                  <tr key={opponentName} 
                  class="border-b border-green-700 hover:bg-green-900/30 transition duration-150">
                    <td class="px-4 py-2 whitespace-nowrap font-medium text-white">
                      <a href={`/members/${members.find(m => m.data.name === opponentName)?.slug}`} class="flex items-center gap-2 hover:underline">
                      <Image
                        src={getMemberImageLazy(opponentName, members)}
                        alt={opponentName}
                        class="w-6 h-4 object-cover rounded" height={36} width={36}
                        loading="lazy"
                      />{opponentName}
                      </a>
                    </td>
                    <td class={`px-1 py-2 whitespace-nowrap text-center text-green-200 font-bold
                    ${
                      stats.difference > 0
                        ? 'text-green-400'
                        : stats.difference < 0
                        ? 'text-red-400'
                        : 'text-gray-300'
                    }`}
                    >{stats.difference === 0 ? '-' : stats.difference > 0 ? `+${stats.difference}` : stats.difference}</td>
                    <td class="px-1 py-2 whitespace-nowrap text-center text-green-200">{stats.played}</td>
                    <td class="px-1 py-2 whitespace-nowrap text-center text-green-400">{stats.wins}</td>
                    <td class="px-1 py-2 whitespace-nowrap text-center text-yellow-400">{stats.draws}</td>
                    <td class="px-1 py-2 whitespace-nowrap text-center text-red-400">{stats.losses}</td>
                    <td class="px-1 py-2 whitespace-nowrap text-center text-green-200">{stats.goalsFor}</td>
                    <td class="px-1 py-2 whitespace-nowrap text-center text-green-200">{stats.goalsAgainst}</td>
                    <td class="px-1 py-2 whitespace-nowrap text-center text-green-200">{stats.goalsFor - stats.goalsAgainst}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        ) : (
          <p class="text-gray-400 italic">There are no stats to show for this National Team</p>
        )}
      <ScorersTable members={members.filter(m => m.slug === member.slug)} matches={playedMatches} />
      </div>
      <RecordsAndStats member={member} matches={playedMatches} members={members}/>
    </div>
  </div>
</App>
