---
import { getCollection, type CollectionEntry } from 'astro:content';
import { Image } from 'astro:assets';
import { getMemberImage, getMemberLogo } from '../../lib/memberUtils';
import App from '../../layouts/App.astro';
import ScorersTable from '../../components/tournaments/ScorersTable.astro';
import MatchCard from '../../components/MatchCard.astro';

type Match = CollectionEntry<'matches'>['data'];
type Tournament = CollectionEntry<'tournaments'>['data'];

const members = await getCollection('members');
const matches = await getCollection('matches');
const tournaments = await getCollection('tournaments');

// --- Par치metro de URL y Miembro Actual ---
const { slug } = Astro.params;
const memberEntry = members.find(m => m.slug === slug);

if (!memberEntry) {
  return Astro.redirect('/404');
  // throw new Error(`Miembro con slug "${slug}" no encontrado.`);
}

const member = memberEntry.data;
const { Content } = await memberEntry.render(); // Obtener el componente para renderizar el Markdown

// L칩gica para 칔ltimos Partidos
// Filtra partidos jugados donde el miembro actual es team1 o team2
// Asume que 'member.name' es el identificador usado en 'matches.team1' y 'matches.team2'
// NOTA: La colecci칩n 'matches' no tiene fecha. Se mostrar치n todos los jugados.
// Si a침ades una fecha a 'matches', puedes ordenar por fecha y limitar (ej: .slice(0, 5))
const playedMatches = matches
  .filter(match => match.data.status === 'played' && (match.data.team1 === member.name || match.data.team2 === member.name))
  .map(match => {
    // Calcula el marcador basado en los goles
    const score1 = match.data.goals?.filter(g => g.team === match.data.team1).length ?? 0;
    const score2 = match.data.goals?.filter(g => g.team === match.data.team2).length ?? 0;
    // Determina si hubo penales y el resultado
    let penaltyScore1 = 0;
    let penaltyScore2 = 0;
    let penaltiesInfo = '';
    if (match.data.penalties && match.data.penalties.length > 0) {
        penaltyScore1 = match.data.penalties.filter(p => p.team === match.data.team1 && p.scored).length;
        penaltyScore2 = match.data.penalties.filter(p => p.team === match.data.team2 && p.scored).length;
        penaltiesInfo = `(${penaltyScore1}-${penaltyScore2} p)`;
    }

    return {
      ...match.data,
      score1,
      score2,
      penaltiesInfo
    };
  });
// Podr칤as ordenarlos por fecha o cualquier otro criterio si tuvieras esa informaci칩n
playedMatches.sort((a, b) => b.date.getTime() - a.date.getTime());

// --- L칩gica para Head-to-Head (H2H) ---
interface H2HStats {
  difference: number;
  played: number;
  wins: number;
  draws: number;
  losses: number;
  goalsFor: number;
  goalsAgainst: number;
}

const h2hStats: Record<string, H2HStats> = {};

playedMatches.forEach(match => {
  const opponentName = match.team1 === member.name ? match.team2 : match.team1;
  if (!opponentName) return; // Saltar si falta un oponente

  // Inicializar estad칤sticas si es el primer encuentro contra este oponente
  if (!h2hStats[opponentName]) {
    h2hStats[opponentName] = { difference: 0, played: 0, wins: 0, draws: 0, losses: 0, goalsFor: 0, goalsAgainst: 0 };
  }

  // Actualizar estad칤sticas
  h2hStats[opponentName].played++;
  let memberScore = 0;
  let opponentScore = 0;

  if (match.team1 === member.name) {
    memberScore = match.score1;
    opponentScore = match.score2;
  } else {
    memberScore = match.score2;
    opponentScore = match.score1;
  }

  h2hStats[opponentName].goalsFor += memberScore;
  h2hStats[opponentName].goalsAgainst += opponentScore;

  if (memberScore > opponentScore) {
    h2hStats[opponentName].wins++;
    h2hStats[opponentName].difference++;
  } else if (memberScore < opponentScore) {
    h2hStats[opponentName].losses++;
    h2hStats[opponentName].difference--;
  } else {
    // Empate sin penales
    h2hStats[opponentName].draws++;
  }
});

const flagImage = getMemberImage(member.name, members);
const logoImage = getMemberLogo(member.name, members);
---
<App title={`FFC - ${member.name}`}>
  <div class="container mx-auto px-4 py-8">

    {/* Profile*/}
    <div class="bg-white dark:bg-green-950/80 shadow-lg rounded-lg p-6 mb-8 flex flex-col md:flex-row items-center gap-6">
      {/* Logos and Info */}
      <div class="flex flex-col items-center md:items-start gap-2">
        <div class="flex gap-4 items-center">
          {flagImage && (
            <Image
              src={flagImage}
              alt={`${member.name}'s flag'`}
              class="h-16 w-auto md:h-20 object-contain rounded border border-gray-200 dark:border-green-700"
              width={128}
              height={128}
              loading="eager"
            />
          )}
        </div>
        
        <!-- Nombre -->
        <h1 class="text-3xl md:text-4xl font-bold text-gray-900 dark:text-white text-center md:text-left break-words max-w-56 flex items-center gap-2">
          {member.name}
          
        </h1>
        
        
        <!-- C칩digo y puntos -->
        <div class="flex flex-col md:flex-row items-center md:items-start text-center md:text-left w-full">
          <p class="text-lg text-gray-500 dark:text-gray-400">({member.code})</p>
          {member.verified && (
            <div class="ml-1 relative group">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="currentColor"
                class="text-green-400"
                title="This member is verified"
              >
                <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                <path d="M12.01 2.011a3.2 3.2 0 0 1 2.113 .797l.154 .145l.698 .698a1.2 1.2 0 0 0 .71 .341l.135 .008h1a3.2 3.2 0 0 1 3.195 3.018l.005 .182v1c0 .27 .092 .533 .258 .743l.09 .1l.697 .698a3.2 3.2 0 0 1 .147 4.382l-.145 .154l-.698 .698a1.2 1.2 0 0 0 -.341 .71l-.008 .135v1a3.2 3.2 0 0 1 -3.018 3.195l-.182 .005h-1a1.2 1.2 0 0 0 -.743 .258l-.1 .09l-.698 .697a3.2 3.2 0 0 1 -4.382 .147l-.154 -.145l-.698 -.698a1.2 1.2 0 0 0 -.71 -.341l-.135 -.008h-1a3.2 3.2 0 0 1 -3.195 -3.018l-.005 -.182v-1a1.2 1.2 0 0 0 -.258 -.743l-.09 -.1l-.697 -.698a3.2 3.2 0 0 1 -.147 -4.382l.145 -.154l.698 -.698a1.2 1.2 0 0 0 .341 -.71l.008 -.135v-1l.005 -.182a3.2 3.2 0 0 1 3.013 -3.013l.182 -.005h1a1.2 1.2 0 0 0 .743 -.258l.1 -.09l.698 -.697a3.2 3.2 0 0 1 2.269 -.944zm3.697 7.282a1 1 0 0 0 -1.414 0l-3.293 3.292l-1.293 -1.292l-.094 -.083a1 1 0 0 0 -1.32 1.497l2 2l.094 .083a1 1 0 0 0 1.32 -.083l4 -4l.083 -.094a1 1 0 0 0 -.083 -1.32z"/>
              </svg>
              <div class="absolute left-1/2 -translate-x-1/2 top-full mt-1 z-10 opacity-0 group-hover:opacity-100 transition-opacity duration-300 bg-green-800 text-white text-xs rounded px-3 py-1 shadow-lg whitespace-nowrap">
                This member is verified
              </div>
            </div>
          )}
        </div>
        
        <!-- Ranking (abajo del todo) -->
        <div class="text-center md:text-left w-full">
          <p class="text-sm text-gray-500 dark:text-gray-400">Rank</p>
          <div class="flex items-end justify-between w-full">
            <p class="text-4xl font-bold text-green-600 dark:text-green-400">{member.id}춿</p>
            <p class="text-2xl font-semibold text-green-700 dark:text-green-300">{member.score} pts</p>
          </div>
        </div>
      </div>
      <div class="flex flex-col items-center md:items-start gap-4">
        {logoImage && (
          <Image
            src={logoImage}
            alt={`${member.federation || member.name}'s Logo'`}
            class="w-16 h-auto md:w-48 object-contain rounded"
            width={256}
            height={256}
            loading="eager"
          />
        )}
      </div>
      {/* Details */}
      <div class="flex-grow grid grid-cols-1 sm:grid-cols-2 gap-4 text-sm md:text-base">
        <div class="bg-gray-50 dark:bg-gradient-to-br from-green-800 via-green-900 to-green-950 p-3 rounded-md">
          {member.federation ? (
            member.feddispatch ? (
              <a href={member.feddispatch} target="_blank" rel="noopener noreferrer" class="text-blue-600 dark:text-white hover:underline font-bold">
                {member.federation}
              </a>
            ) : (
              <span class="ml-1 text-gray-800 dark:text-gray-200">{member.federation}</span>
            )
          ) : <span class="ml-1 text-gray-400 italic">This nation doesn't have a federation</span>}
        </div>
        <div class="bg-gray-50 dark:bg-gradient-to-br from-green-800 via-green-900 to-green-950 p-3 rounded-md">
          <span class="font-semibold text-gray-600 dark:text-gray-300">Region:</span>
          <span class="ml-1 text-gray-800 dark:text-white font-bold">{member.region || <span class="italic text-gray-400">N/A</span>}</span>
        </div>
         <div class="bg-gray-50 dark:bg-gradient-to-br from-green-800 via-green-900 to-green-950 p-3 rounded-md">
          <a href={member.nslink} target="_blank" rel="noopener noreferrer" class="text-blue-600 dark:text-white hover:underline font-bold">
            NationStates Profile 游댕
          </a>
        </div>
        <div class="bg-gray-50 dark:bg-gradient-to-br from-green-800 via-green-900 to-green-950 p-3 rounded-md">
          <span class="font-semibold text-gray-600 dark:text-gray-300">Founded:</span>
          <span class="ml-1 text-gray-800 dark:text-white font-bold">{member.founded || <span class="italic text-gray-400">N/A</span>}</span>
        </div>
        <div class="bg-gray-50 dark:bg-gradient-to-br from-green-800 via-green-900 to-green-950 p-3 rounded-md">
          <span class="font-semibold text-gray-600 dark:text-gray-300">FFC Affiliation:</span>
          <span class="ml-1 text-gray-800 dark:text-white font-bold">{member.affiliation || <span class="italic text-gray-400">N/A</span>}</span>
        </div>
      </div>
    </div>

    {/* Markdown Content */}
    <div class="prose dark:prose-invert max-w-none bg-white dark:bg-green-950/80 shadow-lg rounded-lg p-6 mb-8">
       <h2 class="text-2xl font-semibold mb-4 text-gray-900 dark:text-white border-b pb-2 border-gray-200 dark:border-green-600">About {member.federation || member.name}</h2>
      <Content />
    </div>

    {/* Matches and Stats*/}
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
      {/* Last Played */}
      <div class="bg-white dark:bg-green-950/80 shadow-lg rounded-lg p-6">
        <h2 class="text-2xl font-semibold mb-4 text-gray-900 dark:text-white border-b pb-2 border-gray-200 dark:border-green-600">Last Matches Played</h2>
        {playedMatches.length > 0 ? (
          <div class="space-y-4">
            {playedMatches.map((match) => {
              const tournament = tournaments.find(t => t.data.id === match.tournament_id);
              const tournamentUrl = tournament ? `/${tournament.data.type}/${tournament.data.edition}` : '';
              const tournamentName = tournament?.data.name ?? '';
              return(
              <span class="text-sm text-gray-500 dark:text-gray-300 ml-3">
                <a href={tournamentUrl} class="hover:underline">{tournamentName}</a>
                {match.group ? ` - Group ${match.group}` : ''}
                {match.fixture ? ` - ${match.fixture}` : ''}
              </span>
              <MatchCard match={match} members={members} />
            )})}
          </div>
        ) : (
          <p class="text-gray-500 dark:text-gray-400 italic">This National Team hasn't played any matches yet.</p>
        )}
      </div>

      {/* Stats */}
      <div class="bg-white dark:bg-green-950/80 shadow-lg rounded-lg p-6">
        <h2 class="text-2xl font-semibold mb-4 text-gray-900 dark:text-white border-b pb-2 border-gray-200 dark:border-green-600">Historic Head-to-Head</h2>
        {Object.keys(h2hStats).length > 0 ? (
          <div class="overflow-x-auto">
            <table class="min-w-full border border-green-700 overflow-hidden rounded-lg text-sm">
              <thead>
                <tr class="bg-green-800 text-white">
                  <th scope="col" class="px-4 py-2 text-left tracking-wider">Opponent</th>
                  <th scope="col" class="px-1 py-2 text-center tracking-wider" title="Goles en Contra">Dif</th>
                  <th scope="col" class="px-1 py-2 text-center tracking-wider" title="Partidos Jugados">Pld</th>
                  <th scope="col" class="px-1 py-2 text-center tracking-wider" title="Victorias">W</th>
                  <th scope="col" class="px-1 py-2 text-center tracking-wider" title="Empates">D</th>
                  <th scope="col" class="px-1 py-2 text-center tracking-wider" title="Derrotas">L</th>
                  <th scope="col" class="px-1 py-2 text-center tracking-wider" title="Goles a Favor">GF</th>
                  <th scope="col" class="px-1 py-2 text-center tracking-wider" title="Goles en Contra">GA</th>
                  <th scope="col" class="px-1 py-2 text-center tracking-wider" title="Goles en Contra">GD</th>
                </tr>
              </thead>
              <tbody>
                {Object.entries(h2hStats)
                .sort(([, a], [, b]) => {
                  // partidos jugados
                  if (b.played !== a.played) return b.played - a.played;

                  // m치s victorias
                  if (b.wins !== a.wins) return b.wins - a.wins;

                  // diferencia de goles
                  const diffA = a.goalsFor - a.goalsAgainst;
                  const diffB = b.goalsFor - b.goalsAgainst;
                  if (diffB !== diffA) return diffB - diffA;

                  // goles a favor
                  return b.goalsFor - a.goalsFor;
                })
                .map(([opponentName, stats]) => (
                  <tr key={opponentName} 
                  class="border-b border-green-700 hover:bg-green-900/30 transition duration-150">
                    <td class="px-4 py-2 whitespace-nowrap font-medium text-gray-900 dark:text-white">
                      <a href={`/members/${members.find(m => m.data.name === opponentName)?.slug}`} class="flex items-center gap-2 hover:underline">
                      <Image
                        src={getMemberImage(opponentName, members)}
                        alt={opponentName}
                        class="w-6 h-4 object-cover rounded" height={36} width={36}
                        loading="lazy"
                      />{opponentName}
                      </a>
                    </td>
                    <td class={`px-1 py-2 whitespace-nowrap text-center text-gray-500 dark:text-green-200 font-bold
                    ${
                      stats.difference > 0
                        ? 'text-green-600 dark:text-green-400'
                        : stats.difference < 0
                        ? 'text-red-600 dark:text-red-400'
                        : 'text-gray-500 dark:text-gray-300'
                    }`}
                    >{stats.difference === 0 ? '-' : stats.difference > 0 ? `+${stats.difference}` : stats.difference}</td>
                    <td class="px-1 py-2 whitespace-nowrap text-center text-gray-500 dark:text-green-200">{stats.played}</td>
                    <td class="px-1 py-2 whitespace-nowrap text-center text-green-600 dark:text-green-400">{stats.wins}</td>
                    <td class="px-1 py-2 whitespace-nowrap text-center text-yellow-600 dark:text-yellow-400">{stats.draws}</td>
                    <td class="px-1 py-2 whitespace-nowrap text-center text-red-600 dark:text-red-400">{stats.losses}</td>
                    <td class="px-1 py-2 whitespace-nowrap text-center text-gray-500 dark:text-green-200">{stats.goalsFor}</td>
                    <td class="px-1 py-2 whitespace-nowrap text-center text-gray-500 dark:text-green-200">{stats.goalsAgainst}</td>
                    <td class="px-1 py-2 whitespace-nowrap text-center text-gray-500 dark:text-green-200">{stats.goalsFor - stats.goalsAgainst}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        ) : (
          <p class="text-gray-500 dark:text-gray-400 italic">There are no stats to show for this National Team</p>
        )}
      <ScorersTable members={members.filter(m => m.slug === slug)} matches={playedMatches} />
      </div>
      {/* Top Scorers and Top Assists */}
    </div>

  </div>
</App>
