---
import { Image } from 'astro:assets';
import type { CollectionEntry } from 'astro:content';
import defaultStadiumImage from '@images/stadiums/default-stadium.jpg'; // Asume que tienes una imagen por defecto

interface Props {
  stadium: CollectionEntry<'stadiums'>;
}
const { stadium } = Astro.props;
const { name, city, nation, capacity, opened, image, description, owner, architect } = stadium.data;

// Formatear la capacidad con separadores de miles
const formattedCapacity = capacity ? capacity.toLocaleString() : null;
---

<article class="w-full bg-white/4 border border-white/6 rounded-2xl p-3 flex items-center gap-4 shadow-sm backdrop-blur-sm hover:bg-white/6 transition-colors duration-300">
  <div class="flex-shrink-0">
    <div
      class="w-28 h-20 md:w-32 md:h-24 rounded-lg flex items-center justify-center overflow-hidden bg-gradient-to-br from-green-900 to-green-950"
      aria-hidden="false"
    >
      <Image
        src={image || defaultStadiumImage}
        alt={name}
        class="w-full h-full object-cover"
        loading="lazy"
        format="webp"
        quality={60}
        width={400}
      />
    </div>
  </div>

  <div class="flex-1 min-h-0">
    <div class="flex items-start justify-between gap-3">
      <h3 class="text-base md:text-lg font-bold text-white leading-tight">{name}</h3>
      {formattedCapacity && (
        <span class="text-xs md:text-sm px-2 py-1 rounded-full bg-green-500/20 text-green-300 font-semibold whitespace-nowrap">
          {formattedCapacity}
        </span>
      )}
    </div>

    <div class="flex items-center gap-2 mt-1">
      <p class="text-sm text-white/80">
        <span class="font-semibold text-white">{city}</span>
      </p>
    </div>

    <div class="flex items-center gap-4 mt-2 text-xs text-white/70">
      {opened && (
        <span class="flex items-center gap-1">
          <span class="font-medium">{opened}</span>
        </span>
      )}
      {owner && (
        <span class="flex items-center gap-1">
          <span class="font-medium text-white/80">{owner}</span>
        </span>
      )}
      {architect && (
        <span class="flex items-center gap-1">
          <span class="font-medium text-white/80">{architect}</span>
        </span>
      )}
    </div>

    {description && (
      <p class="text-sm text-white/80 mt-2 line-clamp-2">{description}</p>
    )}
  </div>
</article>

<style>
.line-clamp-2 {
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
}
</style>