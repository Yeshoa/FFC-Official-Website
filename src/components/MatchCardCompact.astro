---
import { Image } from 'astro:assets';
import type { CollectionEntry } from 'astro:content';
import { getMemberImage } from '../lib/memberUtils';
import type { ImageMetadata } from 'astro';
import { getMemberImageLazy } from '../lib/memberUtilsLazy';

// Definir el tipo para los datos de un partido seg칰n el schema
type MatchData = CollectionEntry<'matches'>['data'];

interface Props {
  match: MatchData; // Usar el tipo derivado del schema
  members: CollectionEntry<'members'>[];
}

const { match, members } = Astro.props;

// --- Calcular Marcador Base (Goles en el partido) ---
const goals = match.goals ?? [];
const score1 = goals.filter(g => g.team === match.team1).length;
const score2 = goals.filter(g => g.team === match.team2).length;

// --- Calcular Marcador de Penales (si existen) ---
const penalties = match.penalties ?? [];
const hasPenaltyShootout = penalties.length > 0 && match.status === 'played'; // Solo si hay tanda y se jug칩
let penaltyScore1 = 0;
let penaltyScore2 = 0;
let penaltyInfo = '';

if (hasPenaltyShootout) {
  penaltyScore1 = penalties.filter(p => p.team === match.team1 && p.scored).length;
  penaltyScore2 = penalties.filter(p => p.team === match.team2 && p.scored).length;
  penaltyInfo = `(${penaltyScore1}-${penaltyScore2} p)`; // Texto para mostrar ej: (4-3 p)
}

// --- Determinar Ganador ---
const getWinner = (): string | 'Draw' => {
  // Si el partido no se jug칩 o fue cancelado, no hay ganador a칰n
  if (match.status !== 'played') return 'Draw'; // O podr칤as devolver null/undefined

  if (hasPenaltyShootout) {
    // Ganador por penales
    return penaltyScore1 > penaltyScore2 ? match.team1 :
           penaltyScore2 > penaltyScore1 ? match.team2 :
           'Draw'; // Empate en penales? Muy raro, tratar como empate o seg칰n reglas.
  } else {
    // Ganador por marcador normal (incluye goles en pr칩rroga si los hubo)
    return score1 > score2 ? match.team1 :
           score2 > score1 ? match.team2 :
           'Draw'; // Empate normal
  }
};

const winner = getWinner();

// --- Obtener Im치genes (Llamar a la funci칩n que devuelve la promesa) ---
const team1ImagePromiseFn = getMemberImageLazy(match.team1, members);
const team2ImagePromiseFn = getMemberImageLazy(match.team2, members);

---

<div class="relative bg-gradient-to-br from-green-900/70 to-green-900/70 dark:from-green-900/80 dark:to-green-950/80 rounded-lg p-4 group w-full sm:w-72 hover:scale-105 hover:shadow-xl text-white">
  <div class="flex flex-col space-y-2">
    <div class="flex items-center justify-between">
      <div class="flex items-center space-x-2 overflow-hidden mr-2">
        {team1ImagePromiseFn ? (
          <Image
            src={team1ImagePromiseFn}
            alt={match.team1}
            class="w-5 h-5 object-contain flex-shrink-0 rounded-sm"
            loading="lazy"
            inferSize={true}
          />
        ) : (
          <div class="w-5 h-5 bg-gray-600 rounded-sm flex-shrink-0"></div>
        )}
        <span class={`truncate ${winner === match.team1 ? 'font-bold' : 'font-normal'}`}>{match.team1}</span>
      </div>
      <div class="flex items-center flex-shrink-0">
        {/* Mostrar marcador final */}
        <span class={`font-semibold text-lg ${winner === match.team1 ? 'text-yellow-300' : ''}`}>{score1}</span>
        {/* Mostrar resultado de penales si hubo */}
        {hasPenaltyShootout && penaltyInfo && <span class="text-gray-300 text-xs ml-1">{`(${penaltyScore1})`}</span>}
      </div>
    </div>

    <div class="flex items-center justify-between">
       <div class="flex items-center space-x-2 overflow-hidden mr-2">
        {team2ImagePromiseFn ? (
          <Image
            src={team2ImagePromiseFn}
            alt={match.team2}
            class="w-5 h-5 object-contain flex-shrink-0 rounded-sm"
            loading="lazy"
            inferSize={true}
          />
        ) : (
          <div class="w-5 h-5 bg-gray-600 rounded-sm flex-shrink-0"></div>
        )}
        <span class={`truncate ${winner === match.team2 ? 'font-bold' : 'font-normal'}`}>{match.team2}</span>
      </div>
       <div class="flex items-center flex-shrink-0">
        {/* Mostrar marcador final */}
        <span class={`font-semibold text-lg ${winner === match.team2 ? 'text-yellow-300' : ''}`}>{score2}</span>
         {/* Mostrar resultado de penales si hubo */}
        {hasPenaltyShootout && penaltyInfo && <span class="text-gray-300 text-xs ml-1">{`(${penaltyScore2})`}</span>}
      </div>
    </div>
     {/* Mostrar info de penales globalmente si hubo */}
    {hasPenaltyShootout && penaltyInfo && (
        <div class="text-center text-xs text-yellow-400 font-semibold mt-1">
            {match.team1} won {penaltyInfo} on penalties
        </div>
    )}
    {/* Mostrar estado si no se jug칩 */}
    {match.status === 'scheduled' && (
        <div class="text-center text-xs text-blue-300 mt-1">
            {match.date.toLocaleDateString('es-ES', { /* Ajusta locale */ day: '2-digit', month: '2-digit', year: 'numeric' })} - {match.date.toLocaleTimeString('es-ES', { hour: '2-digit', minute: '2-digit'})}
        </div>
    )}
     {match.status === 'canceled' && (
        <div class="text-center text-xs text-red-400 mt-1">Canceled</div>
    )}
  </div>

  {match.status === 'played' && goals.length > 0 && (
    <div class="absolute -top-34 left-0 bg-black/90 text-white text-xs p-3 rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200 w-60 z-20 pointer-events-none group-hover:pointer-events-auto invisible group-hover:visible max-h-48 overflow-y-auto shadow-lg">
      <h4 class="text-sm font-semibold mb-2 text-center border-b border-gray-600 pb-1">Goalscorers</h4>
      <div class="flex justify-between gap-3">
        <div class="flex-1">
          <p class="font-semibold text-green-400 mb-1">{match.team1}</p>
          {goals.filter(g => g.team === match.team1).length > 0 ? (
            // Agrupamos los goles por jugador
            Object.entries(
              goals
                .filter(g => g.team === match.team1)
                .reduce((acc, g) => {
                  // Creamos una clave 칰nica por jugador y tipo de gol (penal/autogol)
                  const key = `${g.player}${g.ownGoal ? "-og" : ""}${g.penalty ? "-p" : ""}`;
                  if (!acc[key]) {
                    acc[key] = {
                      player: g.player,
                      minutes: [],
                      penalty: g.penalty,
                      ownGoal: g.ownGoal,
                      assists: [] // Guardamos todos los asistentes
                    };
                  }
                  acc[key].minutes.push(g.minute);
                  if (g.assist) acc[key].assists.push(g.assist);
                  return acc;
                }, {})
            ).map(([key, goalGroup]) => (
              <div key={key} class="text-gray-200 mb-0.5">
                {goalGroup.player} {goalGroup.minutes.join(', ')}' {goalGroup.penalty ? "(P)" : ""} {goalGroup.ownGoal ? "(OG)" : ""}
                {goalGroup.assists.length > 0 && (
                  <span class="text-gray-400 text-[10px] italic">
                    {" "}(A: {Array.from(new Set(goalGroup.assists)).join(', ')})
                  </span>
                )}
              </div>
            ))
          ) : (
            <p class="text-gray-500 italic text-center">No goals</p>
          )}
        </div>

        <div class="flex-1">
          <p class="font-semibold text-red-400 mb-1">{match.team2}</p>
          {goals.filter(g => g.team === match.team2).length > 0 ? (
            // Agrupamos los goles por jugador
            Object.entries(
              goals
                .filter(g => g.team === match.team2)
                .reduce((acc, g) => {
                  // Creamos una clave 칰nica por jugador y tipo de gol (penal/autogol)
                  const key = `${g.player}${g.ownGoal ? "-og" : ""}${g.penalty ? "-p" : ""}`;
                  if (!acc[key]) {
                    acc[key] = {
                      player: g.player,
                      minutes: [],
                      penalty: g.penalty,
                      ownGoal: g.ownGoal,
                      assists: [] // Guardamos todos los asistentes
                    };
                  }
                  acc[key].minutes.push(g.minute);
                  if (g.assist) acc[key].assists.push(g.assist);
                  return acc;
                }, {})
            ).map(([key, goalGroup]) => (
              <div key={key} class="text-gray-200 mb-0.5">
                {goalGroup.player} {goalGroup.minutes.join(', ')}' {goalGroup.penalty ? "(P)" : ""} {goalGroup.ownGoal ? "(OG)" : ""}
                {goalGroup.assists.length > 0 && (
                  <span class="text-gray-400 text-[10px] italic">
                    {" "}(A: {Array.from(new Set(goalGroup.assists)).join(', ')})
                  </span>
                )}
              </div>
            ))
          ) : (
            <p class="text-gray-500 italic text-center">No goals</p>
          )}
        </div>
      </div>
      {/* Enlace al partido (opcional) */}
      {match.link && (
        <div class="mt-2 pt-1 border-t border-gray-600 text-center">
          <a href={match.link} target="_blank" rel="noopener noreferrer" class="text-blue-400 hover:text-blue-300 hover:underline text-xs">
            Watch Match 游댕
          </a>
        </div>
      )}
    </div>
  )}
</div>