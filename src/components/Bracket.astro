---
// TournamentBracket.astro
import { Image } from 'astro:assets';
import type { ImageMetadata } from 'astro';
import BracketMatchCard from './BracketMatchCard.astro';
import trophy from '../assets/images/forest-cup/trophy.png';

// No recreamos los datos, usamos los proporcionados
interface Props {
  tourney: any; // Usar el tipo existente que ya tienes definido
  teamLogos: Record<string, ImageMetadata>;
}

const { tourney, teamLogos } = Astro.props;

// Función para obtener los partidos de una fase específica
const getMatchesByRound = (roundName: string) => {
  if (!tourney?.stages) return [];
  
  const knockoutStage = tourney.stages.find((stage: any) => stage.type === 'knockout');
  if (!knockoutStage) return [];
  
  const fixture = knockoutStage.fixture?.find((fix: any) => fix.name === roundName);
  if (!fixture) return [];
  
  return fixture.matches || [];
};

// Obtenemos partidos por fase
const roundOf16Matches = getMatchesByRound('Round of 16');
const quarterFinalMatches = getMatchesByRound('Quarter Finals');
const semiFinalMatches = getMatchesByRound('Semi Finals');
const finalMatches = getMatchesByRound('Final');

const finalMatch = finalMatches[0];

const winnerTeam = (() => {
  if (finalMatch.score.team1_penalty !== undefined && finalMatch.score.team2_penalty !== undefined) {
    return finalMatch.score.team1_penalty > finalMatch.score.team2_penalty ? finalMatch.team1 : finalMatch.team2;
  } 
  if (finalMatch.score.team1_extra_time !== undefined && finalMatch.score.team2_extra_time !== undefined) {
    const team1Total = finalMatch.score.team1_goals + finalMatch.score.team1_extra_time;
    const team2Total = finalMatch.score.team2_goals + finalMatch.score.team2_extra_time;
    return team1Total > team2Total ? finalMatch.team1 : finalMatch.team2;
  }
  return finalMatch.score.team1_goals > finalMatch.score.team2_goals ? finalMatch.team1 : finalMatch.team2;
})();

---

<div class="w-full py-8 px-4 rounded-lg">
  <h2 class="text-2xl font-bold text-center mb-8">Final Bracket</h2>
  
  <div class="flex flex-col justify-center items-center w-full">
    <!-- Estructura del bracket -->
    <div class="flex items-center w-full max-w-7xl gap-4">
      <!-- Cuartos de final (izquierda) -->
      <div class="w-1/5 flex flex-col gap-8">
        {quarterFinalMatches.slice(0, 2).map((match: any) => (
          <BracketMatchCard match={match} teamLogos={teamLogos} />
        ))}
      </div>
      
      <!-- Semifinal (izquierda) -->
      <div class="w-1/5 flex justify-center items-center">
        <div class="w-full">
          {semiFinalMatches[0] && (
            <BracketMatchCard match={semiFinalMatches[0]} teamLogos={teamLogos} />
          )}
        </div>
      </div>
      
      <!-- Final (centro) -->
      <div class="w-1/5 flex flex-col items-center justify-center">
        <div class="w-full mb-4">
          {finalMatches[0] && (
            <BracketMatchCard match={finalMatches[0]} teamLogos={teamLogos} />
          )}
        </div>
        
        {finalMatches[0] && (
          <div class="flex flex-col items-center justify-center mt-4 bg-green-950/70 p-4 rounded-2xl text-2xl font-bold w-full">
            <Image src={trophy} alt={trophy} class="w-auto h-20" />
            <Image src={teamLogos[winnerTeam].default} alt={winnerTeam} class="w-auto h-20" />
            {winnerTeam}
          </div>
        )}
      </div>
      
      <!-- Semifinal (derecha) -->
      <div class="w-1/5 flex justify-center items-center">
        <div class="w-full">
          {semiFinalMatches[1] && (
            <BracketMatchCard match={semiFinalMatches[1]} teamLogos={teamLogos} />
          )}
        </div>
      </div>
      
      <!-- Cuartos de final (derecha) -->
      <div class="w-1/5 flex flex-col gap-8">
        {quarterFinalMatches.slice(2, 4).map((match: any) => (
          <BracketMatchCard match={match} teamLogos={teamLogos} />
        ))}
      </div>
    </div>
  </div>
</div>