---
// src/components/TournamentStats.astro
import { Image } from 'astro:assets';
import type { ImageMetadata } from 'astro';
import { getMemberByName } from '../../lib/memberUtils'; // Ajusta la ruta si es necesario
import type { CollectionEntry } from 'astro:content';

interface Props {
  tournament: CollectionEntry<'tournaments'>;
  matches: CollectionEntry<'matches'>[];
  members: CollectionEntry<'members'>[];
}

const { tournament, matches, members } = Astro.props;

// --- Lógica de Cálculo (similar a tu componente original, pero dentro de este) ---

const goalStats = new Map<string, { player: string; team: string; goals: number; assists: number }>();
const assistStats = new Map<string, { player: string; team: string; assists: number; goals: number }>();

let totalGoals = 0;
const playedMatches = matches.filter(m => m.data.status === 'played');

for (const match of playedMatches) { // Solo procesar partidos jugados
  if (!match.data.goals) continue;

  for (const goal of match.data.goals) {
    totalGoals++; // Contar cada gol para las estadísticas globales

    const key = `${goal.player}-${goal.team}`;

    // Goleadores (ignorar autogoles para la tabla de goleadores)
    if (!goal.ownGoal) {
      if (!goalStats.has(key)) {
        goalStats.set(key, {
          player: goal.player,
          team: goal.team,
          goals: 1,
          assists: 0, // Inicializar asistencias para este jugador
        });
      } else {
        const entry = goalStats.get(key)!;
        entry.goals++;
      }
      // Si el asistente ya está en goalStats, sumar su asistencia (aunque no haya marcado gol aún)
      if (goal.assist) {
         const assistKey = `${goal.assist}-${goal.team}`;
         if (goalStats.has(assistKey)) {
           goalStats.get(assistKey)!.assists++;
         }
         // Si el asistente NO está en goalStats aún (ej. solo dio asistencias), añadirlo
         else if (!goalStats.has(assistKey)) {
            goalStats.set(assistKey, {
              player: goal.assist,
              team: goal.team,
              goals: 0,
              assists: 1,
            });
         }
      }
    }

    // Asistencias (contar asistencias aunque el gol sea en propia puerta, si se especifica)
    if (goal.assist) {
      const assistKey = `${goal.assist}-${goal.team}`;
      if (!assistStats.has(assistKey)) {
        assistStats.set(assistKey, {
          player: goal.assist,
          team: goal.team,
          assists: 1,
          goals: 0, // Inicializar goles para este jugador
        });
      } else {
        const entry = assistStats.get(assistKey)!;
        entry.assists++;
      }
       // Si el goleador ya está en assistStats, sumar su gol (aunque no haya asistido aún)
      if (!goal.ownGoal && assistStats.has(key)) {
         assistStats.get(key)!.goals++;
      }
       // Si el goleador NO está en assistStats aún (ej. solo marcó goles), añadirlo
      else if (!goal.ownGoal && !assistStats.has(key)) {
        assistStats.set(key, {
          player: goal.player,
          team: goal.team,
          assists: 0,
          goals: 1,
        });
      }
    }
  }
}

const topScorers = Array.from(goalStats.values().filter(entry => entry.player))
  .sort((a, b) =>
    b.goals - a.goals || // Primero por goles
    b.assists - a.assists // Luego por asistencias como desempate
  )
  .slice(0, 10); // Mostrar top 10

const topAssisters = Array.from(assistStats.values())
  .sort((a, b) =>
    b.assists - a.assists || // Primero por asistencias
    b.goals - a.goals // Luego por goles como desempate
  )
  .slice(0, 10); // Mostrar top 10

// --- Estadísticas Globales ---
const totalMatchesPlayed = playedMatches.length;
const averageGoalsPerMatch = totalMatchesPlayed > 0 ? (totalGoals / totalMatchesPlayed) : 0;

// --- Premios Individuales (desde datos del torneo) ---
const prizes = tournament.data.prizes;
const officialTopScorers = prizes?.topScorer; // Puede ser un array
const bestPlayer = prizes?.bestPlayer;
const bestGoalkeeper = prizes?.bestGoalkeeper;

const statsCols = topAssisters.length > 0 ? "grid grid-cols-1 lg:grid-cols-3 gap-6 lg:gap-8" : "grid grid-cols-1 lg:grid-cols-2 gap-6 lg:gap-8";
---

<section id="prizes" class="container p-4 md:p-6">
  <h2 class="text-3xl font-bold text-center mb-8">Stats</h2>

  <div class={statsCols}>
    <aside class="border border-green-700 rounded-lg p-4 bg-green-900/20 order-first justify-between">
      <h3 class="text-xl font-semibold mb-4 text-center text-green-300">Individual Prizes</h3>
      {(!officialTopScorers && !bestPlayer && !bestGoalkeeper) && <p class="text-center text-gray-400">There are no prizes for this tournament yet</p>}
      {bestPlayer && (() => {
        const member = getMemberByName(bestPlayer.team, members);
        return (
          <div class="mb-4">
            <h4 class="font-bold text-lg mb-2 text-amber-400">Best Player</h4>
            <div class="flex items-center gap-2 p-2 rounded hover:bg-green-800/30 transition">
              <a href={`/members/${member.slug}`} class="flex items-center gap-2 hover:underline">
                <Image src={member.data.flagPath} alt={member.data.name} class="w-6 h-4 object-cover rounded" height={16} quality={40} format='webp' loading={"lazy"}/>
                <span class="font-medium">{bestPlayer.player}</span> ({bestPlayer.team})
              </a>
            </div>
          </div>
        );
      })()}

      {officialTopScorers && officialTopScorers.length > 0 && (
        <div class="mb-4">
          <h4 class="font-bold text-lg mb-2 text-green-400">Top Scorer</h4>
          {officialTopScorers.map(scorer => {
            const member = getMemberByName(scorer.team, members);
            return (
              <div class="flex items-center gap-2 mb-1 p-2 rounded hover:bg-green-800/30 transition">
                <a href={`/members/${member.slug}`} class="flex items-center gap-2 hover:underline">
                  <Image src={member.data.flagPath} alt={member.data.name} class="w-6 h-4 object-cover rounded" height={16} quality={40} format='webp' loading={"lazy"}/>
                  <span class="font-medium">{scorer.player}</span> ({scorer.team})
                </a>
                <span class="ml-auto font-bold text-green-300">{scorer.goals} Goals</span>
              </div>
            );
          })}
        </div>
      )}
      {bestGoalkeeper && (() => {
        const member = getMemberByName(bestGoalkeeper.team, members);
        return (
        <div>
          <h4 class="font-bold text-lg mb-2 text-blue-300">Best Goalkeeper</h4>
           <div class="flex items-center gap-2 p-2 rounded hover:bg-green-800/30 transition">
              <a href={`/members/${member.slug}`} class="flex items-center gap-2 hover:underline">
                <Image src={member.data.flagPath} loading={"lazy"} alt={member.data.name} class="w-6 h-4 object-cover rounded" height={16} quality={40} format='webp' />
                <span class="font-medium">{bestGoalkeeper.player}</span> ({bestGoalkeeper.team})
              </a>
          </div>
        </div>
      )})}

      <h3 class="text-xl font-semibold mb-4 text-center">Global Stats</h3>
      <div class="text-center grid-cols-3 grid gap-4">
        <div class="p-3 bg-green-600/50 rounded flex flex-col justify-center">
          <p class="text-sm">Total Matches</p>
          <p class="text-2xl font-bold">{totalMatchesPlayed}</p>
        </div>
        <div class="p-3 bg-green-600/50 rounded flex flex-col justify-center">
          <p class="text-sm">Total Goals</p>
          <p class="text-2xl font-bold">{totalGoals}</p>
        </div>
        <div class="p-3 bg-green-600/50 rounded flex flex-col justify-center">
          <p class="text-sm">Goals per Match</p>
          <p class="text-2xl font-bold">{averageGoalsPerMatch.toFixed(2)}</p>
        </div>
      </div>
    </aside>

    <div class="space-y-8">
      <div class="overflow-x-auto">
        <h3 class="text-xl font-semibold text-center mb-4 text-green-300">Top Scorers</h3>
        {topScorers.length > 0 ? (
          <table class="min-w-full text-sm border border-green-700 rounded-lg overflow-hidden">
            <thead class="bg-green-800 text-white">
              <tr>
                <th class="px-4 py-2 text-left">Player</th>
                <th class="px-4 py-2 text-left">Team</th>
                <th class="px-4 py-2 text-right">Goals</th>
                {/*  <th class="px-4 py-2 text-right hidden sm:table-cell">Asist.</th>  */}</tr>
            </thead>
            <tbody>
              {topScorers.map((entry, index) => {
                const member = getMemberByName(entry.team, members);
                return (
                  <tr class="border-b border-green-700 hover:bg-green-900/30 transition duration-150" key={`${entry.player}-${entry.team}-goals`}>
                    <td class="px-4 py-2 font-semibold truncate">{entry.player}</td>
                    <td class="px-4 py-2">
                      <a href={`/members/${member.slug}`} class="flex items-center gap-2 hover:underline">
                        <Image src={member.data.flagPath} loading={"lazy"} alt={entry.team} class="w-6 h-4 object-cover rounded" height={16} quality={40} format='webp' />
                        {entry.team}
                      </a>
                    </td>
                    <td class="px-4 py-2 text-right font-bold">{entry.goals}</td>
                    {/* <td class="px-4 py-2 text-right hidden sm:table-cell">{entry.assists}</td>  */}</tr>
                );
              })}
            </tbody>
          </table>
        ) : (
          <p class="text-center text-gray-400">There are no goals yet</p>
        )}
      </div>
    </div>
    {topAssisters.length > 0 && (
    <div class="space-y-8">
        <div class="overflow-x-auto">
          <h3 class="text-xl font-semibold text-center mb-4 text-cyan-300">Top Assisters</h3>
          <table class="min-w-full text-sm border border-cyan-700 rounded-lg overflow-hidden">
            <thead class="bg-cyan-800 text-white">
              <tr>
                <th class="px-4 py-2 text-left">Player</th>
                <th class="px-4 py-2 text-left">Team</th>
                <th class="px-4 py-2 text-right">Assists</th>
                {/* <th class="px-4 py-2 text-right hidden sm:table-cell">Goles</th>  */}</tr>
            </thead>
            <tbody>
              {topAssisters.map((entry, index) => {
                 const member = getMemberByName(entry.team, members);
                 return (
                  <tr class="border-b border-cyan-700 hover:bg-cyan-900/30 transition duration-150" key={`${entry.player}-${entry.team}-assists`}>
                    <td class="px-4 py-2 font-semibold truncate">{entry.player}</td>
                     <td class="px-4 py-2">
                        <a href={`/members/${member.slug}`} class="flex items-center gap-2 hover:underline">
                          <Image src={member.data.flagPath} loading={"lazy"} alt={entry.team} class="w-6 h-4 object-cover rounded" height={16} quality={40} format='webp' />
                          {entry.team}
                        </a>
                    </td>
                    <td class="px-4 py-2 text-right font-bold">{entry.assists}</td>
                    {/*  <td class="px-4 py-2 text-right hidden sm:table-cell">{entry.goals}</td> */} </tr>
                 );
              })}
            </tbody>
          </table>
        </div>
    </div>
      )}
  </div>
</section>