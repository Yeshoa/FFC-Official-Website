---
import { Image } from 'astro:assets';
import BracketMatchCard from './BracketMatchCard.astro';
import MatchCardCompact from '../MatchCardCompact.astro';
import trophy from '/src/assets/images/tournaments/trophy.png';
import { getMemberImage } from '../../lib/memberUtils';
import { getMatchWinner } from '../../lib/matchUtils';
import { getMemberImageLazy } from '../../lib/memberUtilsLazy';

interface Props {
  matches: any[]; // Lista de partidos del torneo
  members: any[];
  // tournament: any; // Datos del torneo *YA NO LO USO PORQUE LOS MATCHES SE FILTRAN ANTES
  // imageGetter: (teamName: string) => ImageMetadata | null;
}

const { matches, members } = Astro.props;

// Función para obtener los partidos de una fase específica
const getMatchesByRound = (fixtureName: string) => {
  if (!matches || matches.length === 0) return [];
  // Filtrar partidos por fase (fixture)
  return matches.filter((match: any) => 
    match.data.stage === "knockout" && match.data.fixture === fixtureName
  );
};

// Obtener los partidos por ronda
const roundOf16Matches = getMatchesByRound('Round of 16');
const quarterFinalMatches = getMatchesByRound('Quarter Finals');
const semiFinalMatches = getMatchesByRound('Semi Finals');
const finalMatches = getMatchesByRound('Final');

const finalMatch = finalMatches.length > 0 ? finalMatches[0] : null;

// Determinar el ganador del torneo
const winnerTeam = getMatchWinner(finalMatch.data);
---
<div class="w-full py-8 px-4 rounded-lg bg-gradient-to-r from-green-950/80 via-green-900 to-green-950/80">
  <h2 class="text-2xl font-bold text-center mb-8">Final Bracket</h2>

  <div class="flex flex-col justify-center items-center w-full">
    <div class="flex items-center w-full max-w-[96rem] gap-4">
      {roundOf16Matches.length >= 8 && (
        <div class="w-1/5 flex flex-col gap-8">
          {roundOf16Matches.slice(0, 4).map(match => (
            <BracketMatchCard match={match} members={members} />
          ))}
        </div>
      )}
    
      <div class="w-1/5 flex flex-col gap-8">
        {quarterFinalMatches.slice(0, 2).map(match => (
          <BracketMatchCard match={match} members={members} />
        ))}
      </div>
    
      <div class="w-1/5 flex justify-center items-center">
        {semiFinalMatches[0] && (
          <BracketMatchCard match={semiFinalMatches[0]} members={members} />
        )}
      </div>
    
      <!-- Final -->
      <div class="w-1/5 flex flex-col items-center justify-center">
        {finalMatch && (
          <div class="flex flex-col items-center justify-center mt-4 p-4 rounded-2xl text-2xl font-bold w-full">
            {getMemberImageLazy(winnerTeam, members) ? (
              <Image src={getMemberImageLazy(winnerTeam, members)} alt={winnerTeam} class="w-auto h-20" />
            ) : (
              <div class="w-20 h-20 bg-gray-600 rounded-lg" />
            )}
            <a href={`/members/${members.find(m => m.data.name === winnerTeam)?.slug}`} class="hover:underline">{winnerTeam}</a>
            <Image src={trophy} alt="Trophy" class="w-auto h-20" />
          </div>
          <BracketMatchCard match={finalMatch} members={members} />
        )}
      </div>
    
      <div class="w-1/5 flex justify-center items-center">
        {semiFinalMatches[1] && (
          <BracketMatchCard match={semiFinalMatches[1]} members={members} />
        )}
      </div>
    
      <div class="w-1/5 flex flex-col gap-8">
        {quarterFinalMatches.slice(2, 4).map(match => (
          <BracketMatchCard match={match} members={members} />
        ))}
      </div>
    
      {roundOf16Matches.length >= 8 && (
        <div class="w-1/5 flex flex-col gap-8">
          {roundOf16Matches.slice(4, 8).map(match => (
            <BracketMatchCard match={match} members={members} />
          ))}
        </div>
      )}
    </div>
    
  </div>
</div>