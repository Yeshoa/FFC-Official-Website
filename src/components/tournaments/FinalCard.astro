---
import { Image } from 'astro:assets';
import type { CollectionEntry } from 'astro:content';
import type { ImageMetadata } from 'astro';
import { getMemberByName } from '@lib/memberUtils';
import { areThereScorers, getMatchWinner, getMatchResult } from '@lib/matchUtils';
import GoalIcon from '@images/goal.png';
import defaultFlag from '@images/tournaments/default-flag.png';

interface Props {
  match: CollectionEntry<'matches'>['data'];
  members: any[];
  tournamentName?: string; // Optional tournament name to display
}

const { match, members } = Astro.props;

const goals = match.goals ?? [];
const { team1: score1, team2: score2 } = getMatchResult(match);

const penalties = match.penalties ?? [];
const hasPenaltyShootout = penalties.length > 0 && match.status === 'played';
let penaltyScore1 = 0;
let penaltyScore2 = 0;
let penaltyInfo = '';

if (hasPenaltyShootout) {
  penaltyScore1 = penalties.filter(p => p.team === match.team1 && p.scored).length;
  penaltyScore2 = penalties.filter(p => p.team === match.team2 && p.scored).length;
  penaltyInfo = `(${penaltyScore1}-${penaltyScore2})`;
}

const team1 = getMemberByName(match.team1, members) || "-";
const team2 = getMemberByName(match.team2, members) || "-";

const winner = getMatchWinner(match);
---

<div class="relative overflow-hidden w-full max-w-5xl border-3 border-yellow-500 rounded-2xl">
  <!-- Decorative Corner Elements (MOVED AND FIXED)-->
  <div class="absolute top-1.5 left-1.5 w-8 h-8 border-t-3 border-l-3 border-yellow-500 rounded-tl-xl pointer-events-none"></div>
  <div class="absolute top-1.5 right-1.5 w-8 h-8 border-t-3 border-r-3 border-yellow-500 rounded-tr-xl pointer-events-none"></div>
  <div class="absolute bottom-1.5 left-1.5 w-8 h-8 border-b-3 border-l-3 border-yellow-500 rounded-bl-xl pointer-events-none"></div>
  <div class="absolute bottom-1.5 right-1.5 w-8 h-8 border-b-3 border-r-3 border-yellow-500 rounded-br-xl pointer-events-none"></div>
  
  <!-- Championship Banner -->
  <div class="absolute top-4 left-1/2 transform -translate-x-1/2 bg-yellow-500 text-black font-bold px-8 py-1 rounded-lg z-10 shadow-lg text-center">
    <span class="text-sm md:text-xl lg:text-3xl tracking-wider">FINAL</span>
  </div>
  
  <!-- Main Card with Golden Border -->
  <div class="flex flex-col justify-center items-center w-full bg-gradient-to-br from-green-900 to-green-950 py-8 px-5 rounded-2xl shadow-xl text-white hover:from-green-800 hover:to-green-900 transition-all duration-300">
    
    <!-- Teams Section -->
    <div class="grid grid-cols-3 items-center w-full gap-2 mb-4 z-10 mt-4">
      <!-- Team 1 -->
      <div class={`flex flex-col items-center justify-center text-center ${winner === match.team1 ? 'scale-105' : ''} transition-transform duration-300`}>
        {team1 !== "-" && team1.data.flagPath ? (
          <Image
            src={team1.data.flagPath || defaultFlag}
            alt={match.team1}
            class={`h-12 w-16 md:h-16 md:w-24 rounded-md object-cover shadow-md ${winner === match.team1 ? 'ring-2 ring-yellow-400' : 'ring-1 ring-gray-600'}`}
            width={96} 
            loading={"lazy"}
            inferSize={true}
            format="webp"
            quality={70}
          />
        ) : (
          <Image
            src={defaultFlag}
            alt={match.team1}
            class={`h-12 w-16 md:h-16 md:w-24 rounded-md object-cover shadow-md ${winner === match.team1 ? 'ring-2 ring-yellow-400' : 'ring-1 ring-gray-600'}`}
            width={96} 
            loading={"lazy"}
            inferSize={true}
            format="webp"
            quality={70}
          />
        )}
        <a 
          class={`mt-2 font-medium md:text-lg hover:underline ${winner === match.team1 ? 'text-yellow-300 font-bold' : 'text-white'}`} 
          href={team1 !== "-" ? `/members/${team1?.slug}` : '#'}
        >
          {match.team1}
        </a>
      </div>
      
      <!-- Score -->
      <div class="flex flex-col items-center justify-center text-center">
        {match.status === 'played' ? (
          <div class="bg-black/30 px-4 py-2 rounded-lg">
            <span class="text-2xl md:text-3xl whitespace-nowrap font-bold">{score1} - {score2}</span>
            {hasPenaltyShootout && penaltyInfo && (
              <span class="block text-sm text-yellow-400 mt-1">{penaltyInfo}</span>
            )}
          </div>
        ) : match.status === 'scheduled' ? (
          <div>
            <span class="text-xl md:text-2xl font-light text-gray-300 block">VS</span>
            <span class="text-sm text-gray-300 block mt-1">
              {match.date.toLocaleTimeString('es-ES', { hour: '2-digit', minute: '2-digit'})}
            </span>
          </div>
        ) : (
          <span class="text-xl font-light text-red-400">VS</span>
        )}
      </div>
      
      <!-- Team 2 -->
      <div class={`flex flex-col items-center justify-center text-center ${winner === match.team2 ? 'scale-105' : ''} transition-transform duration-300`}>
        {team2 !== "-" && team2.data.flagPath ? (
          <Image
            src={team2.data.flagPath || defaultFlag}
            alt={team2.data.name}
            class={`h-12 w-16 md:h-16 md:w-24 rounded-md object-cover shadow-md ${winner === match.team2 ? 'ring-2 ring-yellow-400' : 'ring-1 ring-gray-600'}`}
            width={96} 
            loading={"lazy"}
            inferSize={true}
            format="webp"
            quality={70}
          />
        ) : (
          <Image
            src={defaultFlag}
            alt={match.team2}
            class={`h-12 w-16 md:h-16 md:w-24 rounded-md object-cover shadow-md ${winner === match.team2 ? 'ring-2 ring-yellow-400' : 'ring-1 ring-gray-600'}`}
            width={96} 
            loading={"lazy"}
            inferSize={true}
            format="webp"
            quality={70}
          />
        )}
        <a 
          class={`mt-2 font-medium md:text-lg hover:underline ${winner === match.team2 ? 'text-yellow-300 font-bold' : 'text-white'}`} 
          href={team2 !== "-" ? `/members/${team2?.slug}` : '#'}
        >
          {match.team2}
        </a>
      </div>
    </div>
    
    <!-- Decorative Divider -->
    <div class="w-3/4 h-px bg-gradient-to-r from-transparent via-yellow-500 to-transparent my-3"></div>
    
    <!-- Goals and Match Details Section -->
    {match.status === 'played' && areThereScorers(match) && (
      <div class="grid grid-cols-7 items-start w-full gap-2 mt-2 text-sm md:text-base z-10">
        <!-- Team 1 Scorers -->
        <div class="flex flex-col w-full col-span-3 justify-start h-full text-right pr-2">
          {goals.filter(g => g.team === match.team1).length > 0 ? (
            goals
              .filter(g => g.team === match.team1)
              .sort((a, b) => {
                // Ordenar por minuto + tiempo agregado
                const minuteA = a.minute + (a.aggregate || 0) / 100;
                const minuteB = b.minute + (b.aggregate || 0) / 100;
                return minuteA - minuteB;
              })
              .map((goal, idx) => (
                <div key={`team1-goal-${idx}-${goal.player}-${goal.minute}`} class="text-xs sm:text-base flex xs:flex-row flex-col items-center gap-2 justify-center mb-1">
                  <span class="font-medium truncate">{goal.player}</span>
                  <div class="flex items-center gap-1">
                    <Image src={GoalIcon} alt="Goal" class="w-4 h-4 flex-shrink-0" loading={"lazy"} format="webp" quality={1} />
                    <span>
                      {goal.minute}{goal.aggregate !== undefined ? `+${goal.aggregate}` : ""}'
                      {goal.penalty ? " (P)" : ""}
                      {goal.ownGoal ? " (OG)" : ""}
                    </span>
                  </div>
                </div>
              ))
          ) : (
            <span class="text-gray-400 italic"></span>
          )}
        </div>
        
        <!-- Video Link -->
        <div class="flex justify-center items-start w-full h-full col-span-1">
          {match.link ? (
            <a 
              href={match.link} 
              target="_blank" 
              rel="noopener noreferrer" 
              title="Watch Match" 
              class="bg-blue-500 hover:bg-blue-400 text-white px-3 py-1 rounded-full text-sm transition-colors"
            >
              Watch
            </a>
          ) : (
            <span class="text-gray-500 text-sm" title="No link available">Watch</span>
          )}
        </div>
        
        <!-- Team 2 Scorers -->
        <div class="flex flex-col w-full col-span-3 justify-start h-full text-left pl-2">
          {goals.filter(g => g.team === match.team2).length > 0 ? (
            goals
              .filter(g => g.team === match.team2)
              .sort((a, b) => {
                // Ordenar por minuto + tiempo agregado
                const minuteA = a.minute + (a.aggregate || 0) / 100;
                const minuteB = b.minute + (b.aggregate || 0) / 100;
                return minuteA - minuteB;
              })
              .map((goal, idx) => (
                <div key={`team2-goal-${idx}-${goal.player}-${goal.minute}`} class="text-xs sm:text-base flex xs:flex-row flex-col items-center gap-2 justify-center mb-1">
                  <span class="font-medium truncate">{goal.player}</span>
                  <div class="flex items-center gap-1">
                    <Image src={GoalIcon} alt="Goal" class="w-4 h-4 flex-shrink-0" loading={"lazy"} format="webp" quality={1} />
                    <span>
                      {goal.minute}{goal.aggregate !== undefined ? `+${goal.aggregate}` : ""}'
                      {goal.penalty ? " (P)" : ""}
                      {goal.ownGoal ? " (OG)" : ""}
                    </span>
                  </div>
                </div>
              ))
          ) : (
            <span class="text-gray-400 italic"></span>
          )}
        </div>
      </div>
    )}
    
    <!-- Match Date for Scheduled Matches -->
    {match.status === 'scheduled' && (
      <div class="text-center mt-3 bg-black/20 px-4 py-2 rounded-lg z-10">
        <span class="text-lg text-yellow-300 font-medium">
          {match.date.toLocaleDateString('es-ES', { weekday: 'long', day: 'numeric', month: 'long' })}
        </span>
      </div>
    )}
  </div>
</div>