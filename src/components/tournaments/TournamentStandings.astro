---
import type { CollectionEntry } from 'astro:content';
type MatchEntry = CollectionEntry<'matches'>;
type TournamentEntry = CollectionEntry<'tournaments'>;

import { Image } from 'astro:assets';
import { getMemberImage } from "@lib/memberUtils"; 
import { getMatchResult } from '@lib/matchUtils';      
import { getTeamStatsInTournament } from '@lib/tournamentUtils'; 

interface Props {
  tournament: TournamentEntry;
  matches: MatchEntry[];     // Partidos SOLO de este torneo
  members: CollectionEntry<'members'>[];
}

const { tournament, matches: tournamentMatches, members } = Astro.props; 
const tournamentId = tournament.data.id;
const participantNames = tournament.data.participants;

// --- Paso 1: Calcular Stats y Fase más alta para cada equipo ---
const standingsData = participantNames.map(name => {
  // Usamos la función utilitaria para obtener las estadísticas base
  const stats = getTeamStatsInTournament(name, tournamentId, tournamentMatches);

  // Replicamos la lógica para determinar la fase más alta desde getTeamPositionInTournament
  let highestPhase = "Group Stage"; // Default

  const playedMatches = tournamentMatches.filter(match =>
      match.data.status === "played" &&
      (match.data.team1 === name || match.data.team2 === name)
  );

  // Función auxiliar para verificar si el equipo jugó en una fase específica
  const playedInFixture = (fixtureName: string): boolean => {
      return playedMatches.some(match => match.data.fixture === fixtureName);
  }

  // Verificar Final
  const finalMatch = playedMatches.find(match => match.data.fixture === "Final");
  if (finalMatch) {
    const { team1: g1, team2: g2 } = getMatchResult(finalMatch.data);
    const isTeam1 = finalMatch.data.team1 === name;
    if ((isTeam1 && g1 > g2) || (!isTeam1 && g2 > g1)) {
      highestPhase = "Champion";
    } else {
      highestPhase = "Final";
    }
  } else if (playedInFixture("Semi Finals")) {
    highestPhase = "Semi Finals";
  } else if (playedInFixture("Quarter Finals")) {
    highestPhase = "Quarter Finals";
  } else if (playedInFixture("Round of 16")) {
    highestPhase = "Round of 16";
  } else if (playedInFixture("Round of 32")) {
    highestPhase = "Round of 32";
  }
  // Si no entró en ninguna fase eliminatoria, se queda como "Group Stage"

  return {
    name,
    highestPhase,
    ...stats // Incluye: played, won, draw, lost, goalsFor, goalsAgainst, points, gd, pr
  };
});


// --- Paso 2: Ordenar según la lógica de getTeamPositionInTournament ---

// Separar equipos por fase
const champions = standingsData.filter(team => team.highestPhase === "Champion");
const finalists = standingsData.filter(team => team.highestPhase === "Final");
const semifinalists = standingsData.filter(team => team.highestPhase === "Semi Finals");
const quarterfinalists = standingsData.filter(team => team.highestPhase === "Quarter Finals");
const r16teams = standingsData.filter(team => team.highestPhase === "Round of 16");
const r32teams = standingsData.filter(team => team.highestPhase === "Round of 32");
const groupStageTeams = standingsData.filter(team => team.highestPhase === "Group Stage");

// Criterio de ordenación estándar (Puntos -> DG -> GF)
const sortByStandardCriteria = (a, b) => {
  if (b.points !== a.points) return b.points - a.points;
  if (b.gd !== a.gd) return b.gd - a.gd; // Usamos el GD calculado por getTeamStatsInTournament
  return b.goalsFor - a.goalsFor;
};

// Ordenar cada grupo de fase eliminatoria (excepto campeón/finalista/semifinalista que tienen orden especial)
const sortedQuarterfinalists = [...quarterfinalists].sort(sortByStandardCriteria);
const sortedR16teams = [...r16teams].sort(sortByStandardCriteria);
const sortedR32teams = [...r32teams].sort(sortByStandardCriteria);
const sortedGroupStageTeams = [...groupStageTeams].sort(sortByStandardCriteria);

// Determinar 3º y 4º puesto entre semifinalistas
let sorted3rdAnd4th = [...semifinalists];
if (semifinalists.length === 2) {
  const thirdPlaceMatch = tournamentMatches.find(match =>
    match.data.fixture === "Third Place" &&
    match.data.status === "played" &&
    (match.data.team1 === semifinalists[0].name || match.data.team1 === semifinalists[1].name) &&
    (match.data.team2 === semifinalists[0].name || match.data.team2 === semifinalists[1].name)
  );

  if (thirdPlaceMatch) {
    const { team1: g1, team2: g2 } = getMatchResult(thirdPlaceMatch.data);
    const team1Won = (thirdPlaceMatch.data.team1 === semifinalists[0].name && g1 > g2) ||
                     (thirdPlaceMatch.data.team2 === semifinalists[0].name && g2 > g1);
    sorted3rdAnd4th = team1Won ? [semifinalists[0], semifinalists[1]] : [semifinalists[1], semifinalists[0]];
  } else {
    // No hay partido por el 3er puesto, ordenar por criterios estándar
    sorted3rdAnd4th.sort(sortByStandardCriteria);
  }
} else if (semifinalists.length > 0) {
    // Si hay más o menos de 2 semifinalistas (raro, pero por si acaso), ordenar por criterios std
    sorted3rdAnd4th.sort(sortByStandardCriteria);
}

// Combinar todos los equipos en el orden final
const finalSortedStats = [
  ...champions,             // 1er lugar
  ...finalists,             // 2do lugar
  ...sorted3rdAnd4th,       // 3er y 4to lugar
  ...sortedQuarterfinalists,// 5to al 8vo
  ...sortedR16teams,        // 9no al 16to
  ...sortedR32teams,        // 17mo al 32do
  ...sortedGroupStageTeams  // Resto
];

// --- Paso 3: Preparar datos para la tabla (ya están listos en finalSortedStats) ---

const getMemberSlug = (teamName: string): string | undefined => {
  return members.find(m => m.data.name === teamName)?.slug;
}
---

<div class="container mx-auto p-4 md:p-6">
  <h2 class="text-2xl font-bold mb-4 text-center">Final Standings</h2>
  <div class="overflow-x-auto">
    <table class="min-w-full w-full table-auto border-collapse text-sm">
      <thead class="bg-green-800 text-white">
        <tr>
          <th class="px-4 py-2 text-center rounded-tl-lg" title="Position">Pos</th>
          <th class="px-2 py-2 text-center"></th>
          <th class="px-2 py-2 text-left" title="Team">Team</th>
          <th class="px-2 py-2 text-center" title="Points">Pts</th>
          <th class="px-2 py-2 text-center" title="Matches Played">Pld</th>
          <th class="px-2 py-2 text-center" title="Wins">W</th>
          <th class="px-2 py-2 text-center" title="Draws">D</th>
          <th class="px-2 py-2 text-center" title="Losses">L</th>
          <th class="px-2 py-2 text-center" title="Goals For">GF</th>
          <th class="px-2 py-2 text-center" title="Goals Against">GA</th>
          <th class="px-2 py-2 text-center" title="Goal Difference">GD</th>
          <th class="px-4 py-2 text-center rounded-tr-lg" title="Performance (%)">PR</th> {/* Columna añadida */}
        </tr>
      </thead>
      <tbody class="text-center">
        {finalSortedStats.map((team, index) => (
          <tr class="border-b border-green-700 hover:bg-green-900/30 transition duration-150">
            <td class="px-2 py-2">{index + 1}</td>
            <td class="px-2 py-2">
              <Image src={getMemberImage(team.name, members)} alt={team.name} loading={"lazy"}
                     width={24} height={16} class="h-4 w-auto object-cover rounded inline-block" quality={50} format="webp"/>
            </td>
            <td class="px-2 py-2 text-left">
              <a href={`/members/${getMemberSlug(team.name)}`} class="font-semibold hover:underline">{team.name}</a>
            </td>
            <td class="px-2 py-2 font-bold">{team.points}</td>
            <td class="px-2 py-2 text-green-200">{team.played}</td>
            <td class="px-2 py-2 text-green-200">{team.won}</td>
            <td class="px-2 py-2 text-green-200">{team.draw}</td>
            <td class="px-2 py-2 text-green-200">{team.lost}</td>
            <td class="px-2 py-2 text-green-200">{team.goalsFor}</td>
            <td class="px-2 py-2 text-green-200">{team.goalsAgainst}</td>
            <td class="px-2 py-2 text-green-100 font-medium">{team.gd}</td>
            <td class="px-2 py-2 text-green-100 font-medium">{team.pr}%</td> {/* Valor de Performance */}
          </tr>
        ))}
        {finalSortedStats.length === 0 && (
            <tr>
                <td colspan="12" class="text-center py-4 text-gray-500">Data not available</td>
            </tr>
        )}
      </tbody>
    </table>
  </div>
</div>