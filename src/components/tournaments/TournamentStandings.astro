---
import type { CollectionEntry } from 'astro:content';
type MatchEntry = CollectionEntry<'matches'>;
type TournamentEntry = CollectionEntry<'tournaments'>;

import { Image } from 'astro:assets';
import { getMemberByName } from "src/utils/memberUtils"; 
import { getTournamentStandings } from 'src/utils/tournamentUtils'; 
import Title from '@components/Title.astro';

interface Props {
  tournament: TournamentEntry;
  matches: MatchEntry[];     // Partidos SOLO de este torneo (opcional ahora)
}

const { tournament } = Astro.props; // Ya no necesitamos matches porque getTournamentStandings maneja todo

// ðŸš€ SIMPLE: Una lÃ­nea reemplaza toda la lÃ³gica compleja
const finalSortedStats = await getTournamentStandings(tournament);

// Obtener los objetos de equipo para mostrar logos/flags
const teamObjects = await Promise.all(finalSortedStats.map(async (team) => {
  const teamObject = await getMemberByName(team.name);
  return teamObject;
}));

---
<div class="w-full items-center py-6 px-4 md:px-0 max-w-8xl">
  <Title size="text-4xl">Standings</Title>
  <h6 class="md:hidden text-center mb-2">Swipe to see full standings</h6>
  <div class="overflow-x-auto w-full">
    <table class="min-w-[768px] lg:min-w-full w-full table-auto border-collapse text-sm">
      <thead class="bg-green-800 text-white">
        <tr>
          <th class="px-4 py-2 text-center rounded-tl-lg" title="Position">Â°</th>
          <th class="py-2 text-center"></th>
          <th class="px-2 py-2 text-left" title="Team">Team</th>
          <th class="px-2 py-2 text-center" title="Points">Pts</th>
          <th class="px-2 py-2 text-center" title="Matches Played">Pld</th>
          <th class="px-2 py-2 text-center" title="Wins">W</th>
          <th class="px-2 py-2 text-center" title="Draws">D</th>
          <th class="px-2 py-2 text-center" title="Losses">L</th>
          <th class="px-2 py-2 text-center" title="Goals For">GF</th>
          <th class="px-2 py-2 text-center" title="Goals Against">GA</th>
          <th class="px-2 py-2 text-center" title="Goal Difference">GD</th>
          <th class="px-4 py-2 text-center rounded-tr-lg" title="Performance">PR</th> 
        </tr>
      </thead>
      <tbody class="text-center">
        {finalSortedStats.map((team, index) => { 
          const teamObject = teamObjects[index];
          return (
          <tr class="border-b border-green-700 hover:bg-green-900/30 transition duration-150">
            <td class="px-2 py-2">{index + 1}Â°</td>
            <td class="py-2 sticky left-0 z-10 bg-green-900 md:bg-transparent">
              <Image src={teamObject?.data.flagPath || teamObject?.data.logoPath} alt={team.name} loading={"lazy"}
                      width={50}  class="h-6 w-10 object-cover rounded inline-block" quality={50} format="webp"/>
            </td>
            <td class="px-2 py-2 text-left">
              <a href={`/members/${teamObject?.slug}`} class="font-semibold hover:underline">{team.name}</a>
            </td>
            <td class="px-2 py-2 font-bold">{team.points}</td>
            <td class="px-2 py-2 text-green-200">{team.played}</td>
            <td class="px-2 py-2 text-green-200">{team.won}</td>
            <td class="px-2 py-2 text-green-200">{team.draw}</td>
            <td class="px-2 py-2 text-green-200">{team.lost}</td>
            <td class="px-2 py-2 text-green-200">{team.goalsFor}</td>
            <td class="px-2 py-2 text-green-200">{team.goalsAgainst}</td>
            <td class="px-2 py-2 text-green-100 font-medium">{team.gd}</td>
            <td class="px-2 py-2 text-green-100 font-medium">{team.pr}%</td>
          </tr>
        )})}
        {finalSortedStats.length === 0 && (
            <tr>
                <td colspan="12" class="text-center py-4 text-gray-500">Data not available</td>
            </tr>
        )}
      </tbody>
    </table>
  </div>
</div>