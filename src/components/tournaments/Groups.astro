---
import { Image } from 'astro:assets';
import MatchCard from '@components/matches/MatchCard.astro';
import MatchCardDetailed from '@components/matches/MatchCardDetailed.astro';
import { getMemberByName } from '@lib/memberUtils';
import defaultFlag from '@images/tournaments/default-flag.png';

// Props:
interface Props {
  matches: any[]; // Lista de partidos del torneo
}
const { matches } = Astro.props;

// Filtrar partidos de fase de grupos
const groupStageMatches = matches.filter(m => m.data.stage?.toLowerCase().includes('group'));

// Agrupar por grupo
const matchesByGroup = groupStageMatches.reduce((acc, match) => {
  const group = match.data.group || 'Unknown Group';
  if (!acc[group]) acc[group] = [];
  acc[group].push(match);
  return acc;
}, {});

// Calcular tabla de posiciones por grupo
async function generateGroupTable(matches) {
  const table = {};

  for (const match of matches) {
    const { team1, team2, goals = [], cards = [] } = match.data;

    // Inicializar si no existe
    for (const team of [team1, team2]) {
      if (!table[team]) {
        const teamObject = await getMemberByName(team) || {}; // Resolve async here
        table[team] = {
          team,
          teamObject: {
            slug: teamObject.slug || '',
            flagPath: teamObject.data?.flagPath || defaultFlag,
            name: teamObject.data?.name || team
          },
          wins: 0,
          draws: 0,
          losses: 0,
          goals_for: 0,
          goals_against: 0,
          points: 0,
          yellow_cards: 0,
          red_cards: 0
        };
      }
    }

    const goals1 = goals.filter(g => g.team === team1).length;
    const goals2 = goals.filter(g => g.team === team2).length;

    table[team1].goals_for += goals1;
    table[team1].goals_against += goals2;

    table[team2].goals_for += goals2;
    table[team2].goals_against += goals1;

    if (goals1 > goals2) {
      table[team1].wins += 1;
      table[team2].losses += 1;
      table[team1].points += 3;
    } else if (goals2 > goals1) {
      table[team2].wins += 1;
      table[team1].losses += 1;
      table[team2].points += 3;
    } else {
      table[team1].draws += 1;
      table[team2].draws += 1;
      table[team1].points += 1;
      table[team2].points += 1;
    }

    for (const card of cards) {
      if (!table[card.team]) continue;
      if (card.type === 'yellow') {
        table[card.team].yellow_cards += 1;
      } else if (card.type === 'red') {
        table[card.team].red_cards += 1;
      }
    }
  }

  // Convertir a array y calcular GD
  return Object.values(table)
    .map(team => ({
      ...team,
      goals_difference: team.goals_for - team.goals_against,
    }))
    .sort((a, b) =>
      b.points - a.points ||
      b.goals_difference - a.goals_difference ||
      b.goals_for - a.goals_for ||
      a.red_cards - b.red_cards ||
      a.yellow_cards - b.yellow_cards
    )
    .map((team, index) => ({
      ...team,
      position: index + 1,
    }));
}

// Precompute tables for all groups
const groupTables = await Promise.all(
  Object.entries(matchesByGroup).map(async ([groupName, groupMatches]) => ({
    groupName,
    matches: groupMatches,
    table: await generateGroupTable(groupMatches),
  }))
);
---

<div class="mt-6 w-full px-4">
  <div class="grid grid-cols-1 md:grid-cols-2 2xl:grid-cols-4 gap-4 w-full">
    {groupTables.map(({ groupName, matches, table }) => (
      <div class="flex flex-col justify-start items-center text-center bg-green-950/30 p-4 rounded-2xl w-full">
        <h4 class="text-4xl font-bold text-white mb-3">Group {groupName}</h4>
        {table.length > 0 ? (
          <table class="w-full text-sm mb-2">
            <thead>
              <tr class="border-b border-green-600">
                <th class="px-1 py-1 text-left" title="Position">Â°</th>
                <th class="px-1 py-1 text-left" title="Team">Team</th>
                <th class="px-1 py-1" title="Points">Pts</th>
                <th class="px-1 py-1 hidden sm:table-cell" title="Wins">W</th>
                <th class="px-1 py-1 hidden sm:table-cell" title="Draws">D</th>
                <th class="px-1 py-1 hidden sm:table-cell" title="Losses">L</th>
                <th class="px-1 py-1 hidden md:table-cell" title="Goals for">GF</th>
                <th class="px-1 py-1 hidden md:table-cell" title="Goals against">GA</th>
                <th class="px-1 py-1" title="Goal difference">GD</th>
              </tr>
            </thead>
            <tbody>
              {table.map(team => (
                <tr class="border-b border-green-700 last:border-b-0" key={team.team}>
                  <td class="px-1 py-1.5 text-left">{team.position}</td>
                  <td class="px-1 py-1.5 text-left flex items-center gap-2 whitespace-nowrap">
                    <Image
                      src={team.teamObject.flagPath}
                      alt={team.teamObject.name}
                      class="h-5 w-8 rounded-md object-cover ring-1 ring-green-600"
                      width={48}
                      loading="lazy"
                      inferSize={true}
                      quality={10}
                      format="webp"
                    />
                    <a
                      href={team.teamObject.slug ? `/members/${team.teamObject.slug}` : '#'}
                      class="hover:underline"
                    >
                      {team.team}
                    </a>
                  </td>
                  <td class="px-1 py-1.5 font-semibold">{team.points}</td>
                  <td class="px-1 py-1.5 hidden sm:table-cell">{team.wins}</td>
                  <td class="px-1 py-1.5 hidden sm:table-cell">{team.draws}</td>
                  <td class="px-1 py-1.5 hidden sm:table-cell">{team.losses}</td>
                  <td class="px-1 py-1.5 hidden md:table-cell">{team.goals_for}</td>
                  <td class="px-1 py-1.5 hidden md:table-cell">{team.goals_against}</td>
                  <td class="px-1 py-1.5">{team.goals_difference}</td>
                </tr>
              ))}
            </tbody>
          </table>
        ) : (
          <p class="text-gray-400 italic">No data available.</p>
        )}
        {matches.length > 0 ? (
          <div class="grid grid-rows-1 gap-2 w-full items-center mt-5">
            {matches.map(match => (
              <MatchCard match={match} />
            ))}
          </div>
        ) : (
          <p class="text-gray-400 italic text-center w-full">No matches found for this group.</p>
        )}
      </div>
    ))}
  </div>
</div>