---
import MatchCard from '@components/matches/MatchCard.astro';
import FinalCard from '@components/matches/FinalCard.astro';
import Title from '@components/Title.astro';

interface MatchData {
  tournament_id: number;
  stage: string;
  fixture: string;
  team1: string;
  team2: string;
  status: string;
  date: string;
  link?: string;
  goals?: Array<{
    team: string;
    player: string;
    minute: number;
  }>;
}

interface Props {
  knockoutMatches: Array<{ id?: string; data: MatchData }>;
}

const { knockoutMatches } = Astro.props as Props;

const matchesByFixture: Record<string, Array<{ id?: string; data: MatchData }>> = knockoutMatches.reduce((acc, match) => {
  const fixture = match.data.fixture || 'Unknown';
  if (!acc[fixture]) acc[fixture] = [];
  acc[fixture].push(match);
  return acc;
}, {});

const sortedFixtures: string[] = Object.keys(matchesByFixture).sort((a, b) => {
  const order = ['Round of 16', 'Quarter Finals', 'Semi Finals', 'Final'];
  return order.indexOf(a) - order.indexOf(b);
});
---
<div class="mt-6 w-full px-4 flex justify-center">
  <div class="flex flex-col justify-center items-center p-4 w-full lg:w-11/12 gap-8 bg-green-950/30 rounded-3xl">
    {knockoutMatches.length > 0 ? (
      sortedFixtures.map(fixture => {
        const gridClasses = fixture.toLowerCase().includes('round of 16')
          ? 'grid grid-cols-1 md:grid-cols-2 gap-4'
          : fixture.toLowerCase().includes('round of 32')
          ? 'grid grid-cols-1 md:grid-cols-4 gap-4'
          : fixture.toLowerCase().includes('quarter')
          ? 'grid grid-cols-1 md:grid-cols-2 gap-4'
          : fixture.toLowerCase().includes('semi')
          ? 'grid grid-cols-1 md:grid-cols-2 gap-4'
          : fixture.toLowerCase().includes('final')
          ? 'flex justify-center items-center'
          : 'grid grid-cols-1 gap-4';

        return (
          <div class="w-full" key={fixture}>
            {fixture !== 'Final' && <h3 class="text-4xl font-bold text-white text-center mb-6">{fixture}</h3>}
            <div class={gridClasses}>
              {matchesByFixture[fixture]
                .sort((a, b) => new Date(a.data.date).getTime() - new Date(b.data.date).getTime())
                .map(match => (fixture === 'Final' ? (
                  <FinalCard key={match.id || `${match.data.team1}-${match.data.team2}`} match={match.data}/>
                ) :
                  <MatchCard
                    key={match.id || `${match.data.team1}-${match.data.team2}`}
                    match={match}
                  />
                ))}
            </div>
          </div>
        );
      })
    ) : (
      <p class="text-gray-400 italic">No knockout matches found for this tournament.</p>
    )}
  </div>
</div>