---
import type { CollectionEntry } from 'astro:content';
import { Image } from 'astro:assets';
import { CURRENT_TOURNAMENT_ID, getTeamPositionInTournament, getTeamByPosition, getFinalResult, getThirdPlaceResult } from 'src/utils/tournamentUtils';
import { getMemberByName } from 'src/utils/memberUtils';
import { getMatchResult } from 'src/utils/matchUtils';
import Title from '@components/Title.astro';

interface Props {
  tournaments: CollectionEntry<'tournaments'>[];
  matches: CollectionEntry<'matches'>[];
  type: 'forest-cup' | 'forestian-champions-league';
}

const { tournaments, matches, type } = Astro.props;

// Filtrar los torneos por tipo y ordenarlos
const allEditions = tournaments
  .filter(t => t.data.type === type)
  .sort((a, b) => b.data.edition - a.data.edition);

// Precompute data for each tournament
const tournamentData = await Promise.all(
  allEditions.map(async (tournament) => {
    const isFutureOrCurrent = tournament.data.id >= CURRENT_TOURNAMENT_ID;
    const host = await getMemberByName(tournament.data.host);
    const champion = await getTeamByPosition(tournament, 1);
    const runnerUp = await getTeamByPosition(tournament, 2);
    const third = await getTeamByPosition(tournament, 3);
    const fourth = await getTeamByPosition(tournament, 4);
    const finalResult = champion ? await getFinalResult(tournament, 1) : "";
    const thirdPlaceResult = await getThirdPlaceResult(tournament);
    const prizes = tournament.data.prizes;
    const bestPlayer = prizes?.bestPlayer
      ? { ...prizes.bestPlayer, member: await getMemberByName(prizes.bestPlayer.team) }
      : null;
    const topScorers = Array.isArray(prizes?.topScorer) && prizes?.topScorer.length > 0
      ? await Promise.all(
          prizes.topScorer.map(async (scorer) => ({
            ...scorer,
            member: await getMemberByName(scorer.team),
          }))
        )
      : [];

    return {
      tournament,
      isFutureOrCurrent,
      host,
      champion,
      runnerUp,
      third,
      fourth,
      finalResult,
      thirdPlaceResult,
      bestPlayer,
      topScorers,
    };
  })
);
const title = type === 'forest-cup' ? 'Forest Cup History' : 'Forestian Champions League History';
---

<Title size="text-4xl mt-6">
    {title}
</Title>
<div class="pb-6 overflow-x-auto">
  <table class="min-w-[1000px] w-full text-md text-center border-collapse rounded-2xl table-fixed">
    <thead class="bg-green-800 text-white">
      <tr>
        <th class="px-2 py-2 rounded-tl-lg w-[5%]">Edition</th>
        <th class="px-2 py-2 w-[16%]">Champion</th>
        <th class="px-2 py-2 w-[5%]">Result</th>
        <th class="px-2 py-2 w-[16%]">Runner-Up</th>
        <th class="px-2 py-2 w-[16%]">Third</th>
        <th class="px-2 py-2 w-[16%]">Fourth</th>
        <th class="px-2 py-2 w-[13%]">Best Player</th>
        <th class="px-2 py-2 w-[13%] rounded-tr-lg">Top Scorer</th>
      </tr>
    </thead>
    <tbody>
      {tournamentData.sort((b, a) => b.tournament.data.edition - a.tournament.data.edition).map(({ tournament, isFutureOrCurrent, host, champion, runnerUp, third, fourth, finalResult, /* thirdPlaceResult, */ bestPlayer, topScorers }) => (
        isFutureOrCurrent ? (
          <tr class="border-b border-green-700 bg-blue-900/10 text-green-300 italic" key={tournament.data.id}>
            <td class="px-2 py-3 flex flex-col items-center gap-1 justify-center">
              {host?.data?.flagPath && (
                <a href={`/members/${host.slug}`} class="flex-shrink-0">
                  <Image src={host.data.flagPath} alt={host.data.name} height={20} class="rounded-sm object-cover max-h-6" loading="lazy" quality={40} format="webp" />
                </a>
              )}
              <a href={`/${type}/${tournament.data.edition}`} class="hover:underline">{tournament.data.edition}</a>
            </td>
            <td colSpan={8} class="py-3">
              To be disputed
            </td>
          </tr>
        ) : (
          <tr class="border-b border-green-700 hover:bg-green-900/20" key={tournament.data.id}>
            <td class="px-2 py-3 flex flex-col items-center gap-1 justify-center">
              {host?.data?.flagPath && (
                <a href={`/members/${host.slug}`} class="flex-shrink-0">
                  <Image src={host.data.flagPath} alt={host.data.name} height={20} class="rounded-sm object-cover max-h-6" loading="lazy" quality={40} format="webp" />
                </a>
              )}
              <a href={`/${type}/${tournament.data.edition}`} class="hover:underline">{tournament.data.edition}</a>
            </td>
            <td class="px-2 py-3 font-semibold">
              {champion && (
                <div class="flex items-center gap-1 justify-center">
                  {champion.data?.flagPath && (
                    <a href={`/members/${champion.slug}`}>
                      <Image src={champion.data.flagPath} alt={champion.data.name} height={18} class="rounded-sm object-cover max-h-6" loading="lazy" quality={40} format="webp" />
                    </a>
                  )}
                  <a href={`/members/${champion.slug}`} class="hover:underline truncate text-yellow-400">{champion.data.name}</a>
                </div>
              )}
            </td>
            <td class="px-2 py-3 font-bold">{finalResult}</td>
            <td class="px-2 py-3">
              {runnerUp && (
                <div class="flex items-center gap-1 justify-center">
                  {runnerUp.data?.flagPath && (
                    <a href={`/members/${runnerUp.slug}`}>
                      <Image src={runnerUp.data.flagPath} alt={runnerUp.data.name} height={18} class="rounded-sm object-cover max-h-6" loading="lazy" quality={10} format="webp" />
                    </a>
                  )}
                  <a href={`/members/${runnerUp.slug}`} class="hover:underline truncate">{runnerUp.data.name}</a>
                </div>
              )}
            </td>
            <td class="px-2 py-3">
              {third && (
                <div class="flex items-center gap-1 justify-center">
                  {third.data?.flagPath && (
                    <a href={`/members/${third.slug}`}>
                      <Image src={third.data.flagPath} alt={third.data.name} height={18} class="rounded-sm object-cover max-h-6" loading="lazy" quality={10} format="webp" />
                    </a>
                  )}
                  <a href={`/members/${third.slug}`} class="hover:underline truncate">{third.data.name}</a>
                </div>
              )}
            </td>
            <td class="px-2 py-3">
              {fourth && (
                <div class="flex items-center gap-1 justify-center">
                  {fourth.data?.flagPath && (
                    <a href={`/members/${fourth.slug}`}>
                      <Image src={fourth.data.flagPath} alt={fourth.data.name} height={18} class="rounded-sm object-cover max-h-6" loading="lazy" quality={10} format="webp" />
                    </a>
                  )}
                  <a href={`/members/${fourth.slug}`} class="hover:underline truncate">{fourth.data.name}</a>
                </div>
              )}
            </td>
            <td class="px-2 py-3">
              {bestPlayer ? (
                <div class="flex items-center gap-1 justify-center">
                  {bestPlayer.member?.data?.flagPath && (
                    <Image src={bestPlayer.member.data.flagPath} alt={bestPlayer.member.data.name} height={14} class="rounded-sm object-cover max-h-4" loading="lazy" quality={10} format="webp" />
                  )}
                  <span class="ml-1 truncate">{bestPlayer.player}</span>
                </div>
              ) : (
                <span class="text-gray-400 italic">N/A</span>
              )}
            </td>
            <td class="px-2 py-3">
              {topScorers && topScorers.length > 0 ? (
                (() => {
                  const top = topScorers[0];
                  return (
                    <div class="flex items-center gap-1 justify-center">
                      {top.member?.data?.flagPath && (
                        <Image src={top.member.data.flagPath} alt={top.member.data.name} width={20} height={14} class="rounded-sm object-cover max-h-4" loading="lazy" quality={10} format="webp" />
                      )}
                      <span class="ml-1 truncate">{top.player}</span>
                      <span class="ml-1 text-green-300 font-bold">({top.goals})</span>
                    </div>
                  );
                })()
              ) : (
                <span class="text-gray-400 italic">N/A</span>
              )}
            </td>
          </tr>
        )
      ))}
    </tbody>
  </table>
</div>