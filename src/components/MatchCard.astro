---
import { Image } from 'astro:assets';
import type { CollectionEntry } from 'astro:content';
import type { ImageMetadata } from 'astro';
import { getMemberImage } from '../lib/memberUtils';
import { getMemberImageLazy } from '../lib/memberUtilsLazy';
import { areThereScorers } from '../lib/matchUtils';
import GoalIcon from '../assets/images/goal.png';

interface Props { // Renombrado de FCCardProps
  match: CollectionEntry<'matches'>['data'];
  members: any[];
  // imageGetter: (teamName: string | undefined) => (() => Promise<{ default: ImageMetadata }>) | null;
}

const { match, members } = Astro.props;

const goals = match.goals ?? [];
const score1 = goals.filter(g => g.team === match.team1).length;
const score2 = goals.filter(g => g.team === match.team2).length;

const penalties = match.penalties ?? [];
const hasPenaltyShootout = penalties.length > 0 && match.status === 'played';
let penaltyScore1 = 0;
let penaltyScore2 = 0;
let penaltyInfo = '';

if (hasPenaltyShootout) {
  penaltyScore1 = penalties.filter(p => p.team === match.team1 && p.scored).length;
  penaltyScore2 = penalties.filter(p => p.team === match.team2 && p.scored).length;
  penaltyInfo = `(${penaltyScore1}-${penaltyScore2})`;
}

const team1ImagePromiseFn = getMemberImageLazy(match.team1, members);
const team2ImagePromiseFn = getMemberImageLazy(match.team2, members);

---

<div class="flex flex-col justify-center items-center w-full max-w-5xl bg-gradient-to-br from-green-800 to-green-900 dark:from-green-900/80 dark:to-green-950/70 py-3 px-4 rounded-2xl shadow-md text-white hover:bg-green-700/90">
  {/* Sección Superior: Equipos y Marcador */}
  <div class="grid grid-cols-7 items-center w-full gap-2 mb-2">
    {/* Equipo 1 */}
    <div class="flex items-center justify-end col-span-3 gap-2 text-right overflow-hidden">
      <a class="font-semibold md:text-lg truncate hover:underline" href={`/members/${members.find(m => m.data.name === match.team1)?.slug}`}>{match.team1}</a>
      {team1ImagePromiseFn ? (
        <Image
          src={team1ImagePromiseFn}
          alt={match.team1}
          class="h-5 w-8 md:h-6 md:w-9 rounded-sm object-cover ring-1 ring-gray-500 flex-shrink-0"
          width={48} 
          height={48}
          loading={"lazy"}
          inferSize={true}
        />
       ) : (
         <div class="h-5 w-8 md:h-6 md:w-9 bg-gray-600 rounded-sm flex-shrink-0"></div>
       )}
    </div>
    {/* Marcador */}
    <div class="text-center">
        {match.status === 'played' ? (
            <span class="text-lg md:text-xl font-bold">{score1} - {score2}</span>
        ) : match.status === 'scheduled' ? (
            <span class="text-sm md:text-base font-light text-gray-300 block">vs</span>
             <span class="text-xs text-gray-400 block mt-0.5">
                 {match.date.toLocaleTimeString('es-ES', { hour: '2-digit', minute: '2-digit'})}
             </span>
        ) : (
            <span class="text-sm font-light text-red-400">VS</span>
        )}
        {hasPenaltyShootout && penaltyInfo && (
            <span class="block text-xs text-yellow-400 mt-0.5">{penaltyInfo}</span>
        )}
    </div>
    {/* Equipo 2 */}
    <div class="flex items-center col-span-3 gap-2 text-left overflow-hidden">
       {team2ImagePromiseFn ? (
        <Image
          src={team2ImagePromiseFn}
          alt={match.team2}
          class="h-5 w-8 md:h-6 md:w-9 rounded-sm object-cover ring-1 ring-gray-500 flex-shrink-0"
          width={48} 
          height={48}
          loading={"lazy"}
          inferSize={true}
        />
      ) : (
        <div class="h-5 w-8 md:h-6 md:w-9 bg-gray-600 rounded-sm flex-shrink-0"></div>
      )}
      <a class="font-semibold md:text-lg truncate hover:underline" href={`/members/${members.find(m => m.data.name === match.team2)?.slug}`}>{match.team2}</a>
    </div>
  </div>

   {/* Separador Opcional */}
   {/* <hr class="border-gray-700 w-3/4 my-1"/> */}

  {/* Sección Inferior: Goles y Detalles - Solo si se jugó */}
  {match.status === 'played' && areThereScorers(match) && (
    <div class="grid grid-cols-7 items-start w-full gap-2 mt-1 text-xs md:text-sm">
      {/* Goles Equipo 1 */}
      <div class="flex flex-col w-full col-span-3 items-end justify-start h-full text-right pr-1">
        {goals.filter(g => g.team === match.team1).length > 0 ? (
          // Agrupamos los goles por jugador
          Object.entries(
            goals
              .filter(g => g.team === match.team1)
              .reduce((acc, g) => {
                // Creamos una clave única que incluya si es penal o autogol
                const key = g.player; // solo agrupamos por nombre

                if (!acc[key]) {
                  acc[key] = {
                    player: g.player,
                    minutes: [],
                    aggregates: [],
                    penalty: false,
                    ownGoal: false
                  };
                }

                acc[key].minutes.push(g.minute);
                if (g.aggregate) acc[key].aggregates.push(g.aggregate);
                // Marcar como penal/autogol si al menos un gol lo fue
                acc[key].penalty = acc[key].penalty || g.penalty === true;
                acc[key].ownGoal = acc[key].ownGoal || g.ownGoal === true;

                return acc;
              }, {})
          ).map(([key, goalGroup]) => (
            <div key={key} class="flex items-center gap-1.5 justify-end">
              <span class="truncate" title={goalGroup.player}>{goalGroup.player}</span>
              <Image src={GoalIcon} alt="Goal" class="w-3 h-3 flex-shrink-0" loading={"lazy"}/>
              <span>
                {goalGroup.minutes.map((minute, idx) => (
                  <span key={minute}>
                    {minute}{goalGroup.aggregates[idx] !== undefined ? `+${goalGroup.aggregates[idx]}` : ""}'{idx < goalGroup.minutes.length - 1 ? ", " : ""}
                  </span>
                ))}
                {goalGroup.penalty ? "(P)" : ""}
                {goalGroup.ownGoal ? " (OG)" : ""}
              </span>
            </div>
          ))
        ) : (
          <span class="text-gray-500 italic text-xs"></span>
        )}
      </div>

      {/* Enlace Detalles/Video */}
      <div class="flex justify-center items-center w-full h-full col-span-1 pt-1">
        {match.link ? (
          <a href={match.link} target="_blank" rel="noopener noreferrer" title="Watch Match" class="text-blue-400 hover:text-blue-300 hover:underline text-xs md:text-sm transition-colors">
            ▶️ Match
          </a>
        ) : (
          <span class="text-gray-600 text-xs md:text-sm" title="No link available">Watch Match</span>
        )}
      </div>

      {/* Goles Equipo 2 */}
      <div class="flex flex-col w-full col-span-3 justify-start h-full text-left pl-1">
        {goals.filter(g => g.team === match.team2).length > 0 ? (
          // Agrupamos los goles por jugador
          Object.entries(
            goals
              .filter(g => g.team === match.team2)
              .reduce((acc, g) => {
                // Creamos una clave única que incluya si es penal o autogol
                const key = `${g.player}${g.ownGoal ? "-og" : ""}${g.penalty ? "-p" : ""}`;
                if (!acc[key]) {
                  acc[key] = {
                    player: g.player,
                    minutes: [],
                    aggregates: [],
                    penalty: g.penalty,
                    ownGoal: g.ownGoal
                  };
                }
                acc[key].minutes.push(g.minute);
                if (g.aggregate) acc[key].aggregates.push(g.aggregate);
                return acc;
              }, {})
          ).map(([key, goalGroup]) => (
            <div key={key} class="flex items-center gap-1.5 justify-start">
              <span>
                {goalGroup.minutes.map((minute, idx) => (
                  <span key={minute}>
                    {minute}{goalGroup.aggregates[idx] !== undefined ? `+${goalGroup.aggregates[idx]}` : ""}'{idx < goalGroup.minutes.length - 1 ? ", " : ""}
                  </span>
                ))}
                {goalGroup.penalty ? "(P)" : ""}
                {goalGroup.ownGoal ? " (OG)" : ""}
              </span>
              <Image src={GoalIcon} alt="Goal" class="w-3 h-3 flex-shrink-0" loading={"lazy"}/>
              <span class="truncate" title={goalGroup.player}>{goalGroup.player}</span>
            </div>
          ))
        ) : (
          <span class="text-gray-500 italic text-xs"></span>
        )}
      </div>
    </div>
  )}
  {/* Mostrar Fecha si está programado */}
  {match.status === 'scheduled' && (
    <div class="text-center text-xs text-gray-400 mt-2">
      {match.date.toLocaleDateString('es-ES', { day: 'numeric', month: 'short' })}
    </div>
  )}
</div>