---
import { Image } from 'astro:assets';
import type { CollectionEntry } from 'astro:content';
import type { ImageMetadata } from 'astro';
import { getMemberByName } from '@lib/memberUtils';
import { areThereScorers, getMatchWinner, getMatchResult } from '@lib/matchUtils';
import GoalIcon from '@images/goal.png';

interface Props { 
  match: CollectionEntry<'matches'>['data'];
  members: any[];
}

const { match, members } = Astro.props;

const goals = match.goals ?? [];
const { team1: score1, team2: score2 } = getMatchResult(match);

const penalties = match.penalties ?? [];
const hasPenaltyShootout = penalties.length > 0 && match.status === 'played';
let penaltyScore1 = 0;
let penaltyScore2 = 0;
let penaltyInfo = '';

if (hasPenaltyShootout) {
  penaltyScore1 = penalties.filter(p => p.team === match.team1 && p.scored).length;
  penaltyScore2 = penalties.filter(p => p.team === match.team2 && p.scored).length;
  penaltyInfo = `(${penaltyScore1}-${penaltyScore2})`;
}

const team1 = getMemberByName(match.team1, members);
const team2 = getMemberByName(match.team2, members);

const winner = getMatchWinner(match);
---

<div class="flex flex-col justify-center items-center w-full max-w-5xl bg-gradient-to-br from-green-900/80 to-green-950/70 py-3 px-4 rounded-2xl shadow-md text-white hover:bg-green-700/90">
  {/* Secci칩n Superior: Equipos y Marcador */}
  <div class="grid grid-cols-7 items-center w-full gap-2 mb-2">
    {/* Equipo 1 */}
    <div class="flex items-center justify-end col-span-3 gap-2 text-right overflow-hidden">
      <a class={`${winner === match.team1 ? 'font-bold' : 'font-light'} md:text-lg truncate hover:underline`} href={`/members/${team1?.slug}`}>{team1?.data.name}</a>
      {team1?.data.flagPath || team1?.data.logoPath ? (
        <Image
          src={team1.data.flagPath || team1.data.logoPath}
          alt={team1.data.name}
          class="h-5 w-8 md:h-6 md:w-9 rounded-sm object-cover ring-1 ring-gray-500 flex-shrink-0"
          width={48} 
          height={48}
          loading={"lazy"}
          inferSize={true}
          format="webp"
          quality={10}
        />
       ) : (
         <div class="h-5 w-8 md:h-6 md:w-9 bg-gray-600 rounded-sm flex-shrink-0"></div>
       )}
    </div>
    {/* Marcador */}
    <div class="text-center">
        {match.status === 'played' ? (
            <span class="text-lg md:text-xl whitespace-nowrap font-bold">{score1} - {score2}</span>
        ) : match.status === 'scheduled' ? (
            <span class="text-sm md:text-base font-light text-gray-300 block">vs</span>
             <span class="text-xs text-gray-400 block mt-0.5">
                 {match.date.toLocaleTimeString('es-ES', { hour: '2-digit', minute: '2-digit'})}
             </span>
        ) : (
            <span class="text-sm font-light text-red-400">VS</span>
        )}
        {hasPenaltyShootout && penaltyInfo && (
            <span class="block text-xs text-yellow-400 mt-0.5">{penaltyInfo}</span>
        )}
    </div>
    {/* Equipo 2 */}
    <div class="flex items-center col-span-3 gap-2 text-left overflow-hidden">
       {team2?.data.flagPath || team2?.data.logoPath ? (
        <Image
          src={team2.data.flagPath || team2.data.logoPath}
          alt={team2.data.name}
          class="h-5 w-8 md:h-6 md:w-9 rounded-sm object-cover ring-1 ring-gray-500 flex-shrink-0"
          width={48} 
          height={48}
          loading={"lazy"}
          inferSize={true}
          format="webp"
          quality={10}
        />
      ) : (
        <div class="h-5 w-8 md:h-6 md:w-9 bg-gray-600 rounded-sm flex-shrink-0"></div>
      )}
      <a class={`${winner === match.team2 ? 'font-bold' : 'font-light'} md:text-lg truncate hover:underline`} href={`/members/${team2?.slug}`}>{team2?.data.name}</a>
    </div>
  </div>

   {/* Separador Opcional */}
   {/* <hr class="border-gray-700 w-3/4 my-1"/> */}

  {/* Secci칩n Inferior: Goles y Detalles - Solo si se jug칩 */}
  {match.status === 'played' && areThereScorers(match) && (
    <div class="grid grid-cols-7 items-start w-full gap-2 mt-1 text-xs md:text-sm">
      {/* Goles Equipo 1 */}
      <div class="flex flex-col w-full col-span-3 items-end justify-start h-full text-right pr-1">
        {goals.filter(g => g.team === match.team1).length > 0 ? (
          goals
            .filter(g => g.team === match.team1)
            .sort((a, b) => {
              // Ordenar por minuto + tiempo agregado
              const minuteA = a.minute + (a.aggregate || 0) / 100;
              const minuteB = b.minute + (b.aggregate || 0) / 100;
              return minuteA - minuteB;
            })
            .map((goal, idx) => (
              <div key={`team1-goal-${idx}-${goal.player}-${goal.minute}`} class="flex items-center gap-1.5 justify-end">
                <span class="truncate" title={goal.player}>{goal.player}</span>
                <Image src={GoalIcon} alt="Goal" class="w-3 h-3 flex-shrink-0" loading={"lazy"} format="webp" quality={1} />
                <span>
                  {goal.minute}{goal.aggregate !== undefined ? `+${goal.aggregate}` : ""}'
                  {goal.penalty ? " (P)" : ""}
                  {goal.ownGoal ? " (OG)" : ""}
                </span>
              </div>
            ))
        ) : (
          <span class="text-gray-500 italic text-xs"></span>
        )}
      </div>

      {/* Enlace Detalles/Video */}
      <div class="flex justify-center items-start w-full h-full col-span-1">
        {match.link ? (
          <a href={match.link} target="_blank" rel="noopener noreferrer" title="Watch Match" 
          class="bg-blue-500/70 hover:bg-blue-400 text-white px-2 py-1 rounded-full text-xs transition-colors">
            Watch
          </a>
        ) : (
          <span class="text-gray-600 text-xs md:text-sm" title="No link available">Watch</span>
        )}
      </div>

      {/* Goles Equipo 2 */}
      <div class="flex flex-col w-full col-span-3 justify-start h-full text-left pl-1">
        {goals.filter(g => g.team === match.team2).length > 0 ? (
          goals
            .filter(g => g.team === match.team2)
            .sort((a, b) => {
              // Ordenar por minuto + tiempo agregado
              const minuteA = a.minute + (a.aggregate || 0) / 100;
              const minuteB = b.minute + (b.aggregate || 0) / 100;
              return minuteA - minuteB;
            })
            .map((goal, idx) => (
              <div key={`team2-goal-${idx}-${goal.player}-${goal.minute}`} class="flex items-center gap-1.5 justify-start">
                <span class="truncate" title={goal.player}>{goal.player}</span>
                <Image src={GoalIcon} alt="Goal" class="w-3 h-3 flex-shrink-0" loading={"lazy"} format="webp" quality={1} />
                <span>
                  {goal.minute}{goal.aggregate !== undefined ? `+${goal.aggregate}` : ""}'
                  {goal.penalty ? " (P)" : ""}
                  {goal.ownGoal ? " (OG)" : ""}
                </span>
              </div>
            ))
        ) : (
          <span class="text-gray-500 italic text-xs"></span>
        )}
      </div>
    </div>
  )}
  {/* Mostrar Fecha si est치 programado */}
  {match.status === 'scheduled' && (
    <div class="text-center text-xs text-gray-400 mt-2">
      {match.date.toLocaleDateString('es-ES', { day: 'numeric', month: 'short' })}
    </div>
  )}
</div>