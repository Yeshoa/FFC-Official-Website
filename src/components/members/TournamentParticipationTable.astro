---
// TournamentParticipationTable.astro
import type { CollectionEntry } from 'astro:content';
import { getMemberByName } from '@lib/memberUtils';
import { getMatchResult } from '@lib/matchUtils';
import { Image } from 'astro:assets';
import { getTeamStatsInTournament, getTeamFinalResult, getTopScorerOfTeamInTournament, getTeamPositionInTournament} from '../../lib/tournamentUtils';
import { CURRENT_TOURNAMENT_ID } from '../../lib/tournamentUtils';

interface Props {
  member: CollectionEntry<'members'>;
  tournaments: CollectionEntry<'tournaments'>[];
  matches: CollectionEntry<'matches'>[];
  members: CollectionEntry<'members'>[];
  type: 'forest-cup' | 'forestian-champions-league';
}
// Member para mostrar los datos del miembro, tournaments y matches para obtener los datos de los torneos, members para las ediciones
const { member, tournaments, matches, members, type } = Astro.props;
const memberName = member.data.name;
// Filtrar los torneos por tipo
const allEditions = tournaments
  .filter(t => t.data.type === type)
  .sort((a, b) => b.data.edition - a.data.edition);
// Función auxiliar para obtener las estadísticas de un torneo

function getStatsForTournament(tournamentId: number) {
  return getTeamStatsInTournament(memberName, tournamentId, matches);
}
// Función auxiliar para obtener el máximo goleador del equipo de un torneo
function getTopScorerInTournament(tournamentId: number) {
  return getTopScorerOfTeamInTournament(memberName, tournamentId, matches);
}

function getTeamPositionInTournamentById(tournamentId: number) {
  return getTeamPositionInTournament(tournaments.find(t => t.data.id === tournamentId)!, matches, memberName);
}

function getTeamFinalResultInTournament(tournamentId: number) {
  return getTeamFinalResult(memberName, tournaments.find(t => t.data.id === tournamentId)!, matches);
}
---

<div class="bg-green-950/80 shadow-lg rounded-lg p-6 mb-8">
<h2 class="text-2xl font-semibold mb-4 border-b pb-2 border-green-600">{type === 'forest-cup' ? 'Forest Cup' : 'Champions League'} Participations</h2>
<h6 class="md:hidden text-center mb-2 text-gray-400">Swipe to see the full table</h6>
  <div class="overflow-x-auto">
    <table class="w-full text-center table-auto border-collapse">
      <thead class="bg-green-800 text-white">
        <tr>
          <th class="px-2 py-2 rounded-tl-lg" title="Edition">Edition</th>
          <th class="px-2 py-2" title="Final match">Result</th>
          <th class="px-2 py-2" title="Position">Pos</th>
          <th class="px-2 py-2" title="Matches Played">Pld</th>
          <th class="px-2 py-2" title="Wins">W</th>
          <th class="px-2 py-2" title="Draws">D</th>
          <th class="px-2 py-2" title="Losses">L</th>
          <th class="px-2 py-2" title="Goals for">GF</th>
          <th class="px-2 py-2" title="Goals against">GA</th>
          <th class="px-2 py-2" title="Goal difference">GD</th>
          <th class="px-2 py-2" title="Points">Pts</th>
          <th class="px-2 py-2" title="Performance">PR</th>
          <th class="px-2 py-2 rounded-tr-lg" title="Top scorer">Top Scorer</th>
        </tr>
      </thead>
      <tbody class="">
        {allEditions.sort((b, a) => b.data.edition - a.data.edition).map(t => {
          const host = getMemberByName(t.data.host, members);
          const hostClass = t.data.host === memberName ? 'text-amber-400 font-bold' : '';
          
          const didParticipate = t.data.participants && t.data.participants.includes(memberName);
          const isFutureOrCurrent = t.data.id >= CURRENT_TOURNAMENT_ID;

          if (!didParticipate && !isFutureOrCurrent) {
            return (
              <tr class="border-b border-green-700 italic bg-red-900/10 text-red-300">
                <td class={`px-2 py-2 flex flex-col items-center gap-1 justify-center`}>
                  {host && <a href={`/members/${host.slug}`} class="flex-shrink-0"><Image src={host.data.flagPath} alt={host.data.name} height={20} class="rounded-sm max-h-14" loading={'lazy'} quality={10} format={'webp'} /></a>}
                  <a href={`/${type}/${t.data.edition}`} class={`hover:underline ${hostClass}`}>{t.data.edition}</a>
                </td>
                <td colspan="12" class="py-2">
                  Didn't participate
                </td>
              </tr>
            );
          } else if (isFutureOrCurrent) {
            return (
              <tr class="border-b border-green-700 italic bg-blue-800/10 text-green-300">
                <td class="px-2 py-2 flex flex-col items-center gap-1 justify-center">
                  {host && <a href={`/members/${host.slug}`} class="flex-shrink-0"><Image src={host.data.flagPath} alt={host.data.name} height={20} class="rounded-sm max-h-14" loading={'lazy'} quality={10} format={'webp'} /></a>}
                  <a href={`/${type}/${t.data.edition}`} class={`hover:underline ${hostClass}`}>{t.data.edition}</a>
                </td>
                <td colspan="12" class="py-2">
                  {didParticipate ? "Qualified" : "To be determined"}
                </td>
              </tr>
            );
          }


  
          const stats = getStatsForTournament(t.data.id);
          const topScorer = getTopScorerInTournament(t.data.id);
          const position = getTeamPositionInTournamentById(t.data.id);
          const resultClass =  position === 1 ? 'text-amber-400 font-bold' : position === 2 ? 'text-sky-300 font-bold' : position === 3 ? 'text-amber-600 font-bold' : '';
          return (
            <tr class="border-b border-green-700 hover:bg-green-900/20">
              <td class={`px-2 py-2 flex flex-col items-center gap-1 justify-center ${hostClass}`}>
                {host && <a href={`/members/${host.slug}`} class="flex-shrink-0"><Image src={host.data.flagPath} alt={host.data.name} height={20} class="rounded-sm max-h-14" quality={10} format={'webp'} /></a>}
                <a href={`/${type}/${t.data.edition}`} class={`hover:underline`}>{t.data.edition}</a>
              </td>
              <td class={`px-2 py-2 ${resultClass}`}>{getTeamFinalResultInTournament(t.data.id)}</td> {/* Placeholder para resultado final */}
              <td class="px-2 py-2 font-black">{position}°</td> {/* Placeholder para posición */}
              <td class="px-2 py-2">{stats.played}</td>
              <td class="px-2 py-2">{stats.won}</td>
              <td class="px-2 py-2">{stats.draw}</td>
              <td class="px-2 py-2">{stats.lost}</td>
              <td class="px-2 py-2">{stats.goalsFor}</td>
              <td class="px-2 py-2">{stats.goalsAgainst}</td>
              <td class="px-2 py-2">{stats.gd}</td>
              <td class="px-2 py-2 font-bold">{stats.points}</td>
              <td class="px-2 py-2">{stats.pr}%</td>
              <td class="px-2 py-2 truncate">{topScorer}</td>
            </tr>
          );
        })}
      </tbody>
    </table>
  </div>
</div>