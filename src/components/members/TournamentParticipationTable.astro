---
// TournamentParticipationTable.astro
import type { CollectionEntry } from 'astro:content';
import { getMemberImage } from '../../lib/memberUtils';
import { getMatchResult } from '../../lib/matchUtils';
import { Image } from 'astro:assets';
import { getTeamStatsInTournament, getTeamFinalResult, getTopScorerOfTeamInTournament, getTeamPositionInTournament} from '../../lib/tournamentUtils';
import { getMemberImageLazy } from '../../lib/memberUtilsLazy';

interface Props {
  member: CollectionEntry<'members'>;
  tournaments: CollectionEntry<'tournaments'>[];
  matches: CollectionEntry<'matches'>[];
  members: CollectionEntry<'members'>[];
  type: 'forest-cup' | 'forestian-champions-league';
}
// Member para mostrar los datos del miembro, tournaments y matches para obtener los datos de los torneos, members para las ediciones
const { member, tournaments, matches, members, type } = Astro.props;
const memberName = member.data.name;
// Filtrar los torneos por tipo
const allEditions = tournaments
  .filter(t => t.data.type === type)
  .sort((a, b) => b.data.edition - a.data.edition);
// Función auxiliar para obtener las estadísticas de un torneo

function getStatsForTournament(tournamentId: number) {
  return getTeamStatsInTournament(memberName, tournamentId, matches);
}
// Función auxiliar para obtener el máximo goleador del equipo de un torneo
function getTopScorerInTournament(tournamentId: number) {
  return getTopScorerOfTeamInTournament(memberName, tournamentId, matches);
}

function getTeamPositionInTournamentById(tournamentId: number) {
  return getTeamPositionInTournament(tournaments.find(t => t.data.id === tournamentId)!, matches, memberName);
}

function getTeamFinalResultInTournament(tournamentId: number) {
  return getTeamFinalResult(memberName, tournaments.find(t => t.data.id === tournamentId)!, matches);
}
---

<div class="bg-green-950/80 shadow-lg rounded-lg p-6 mb-8">
  <h2 class="text-2xl font-semibold mb-4 border-b pb-2 border-green-600">{type === 'forest-cup' ? 'Forest Cup' : 'Champions League'} Participations</h2>
  <table class="w-full text-sm text-center table-auto border-collapse">
    <thead class="bg-green-800 text-white">
      <tr>
        <th class="px-2 py-2 rounded-tl-lg" title="Edition">Edition</th>
        <th class="px-2 py-2" title="Final match">Result</th>
        <th class="px-2 py-2" title="Position">Pos</th>
        <th class="px-2 py-2" title="Matches Played">Pld</th>
        <th class="px-2 py-2" title="Wins">W</th>
        <th class="px-2 py-2" title="Draws">D</th>
        <th class="px-2 py-2" title="Losses">L</th>
        <th class="px-2 py-2" title="Goals for">GF</th>
        <th class="px-2 py-2" title="Goals against">GA</th>
        <th class="px-2 py-2" title="Goal difference">GD</th>
        <th class="px-2 py-2" title="Points">Pts</th>
        <th class="px-2 py-2" title="Performance">PR</th>
        <th class="px-2 py-2 rounded-tr-lg" title="Top scorer">Top Scorer</th>
      </tr>
    </thead>
    <tbody class="">
      {allEditions.sort((b, a) => b.data.edition - a.data.edition).map(t => {
        const didParticipate = t.data.participants.includes(memberName);
        const hostImage = getMemberImageLazy(t.data.host, members);

        if (!didParticipate) {
          return (
            <tr class="border-b border-green-700 bg-red-900/10 text-red-300 italic">
              <td class="px-2 py-2 flex items-center gap-1 justify-center">
                {hostImage && <a  href={`/members/${members.find(m => m.data.name === t.data.host)?.slug}`}><Image src={hostImage} alt={t.data.host} width={20} height={14} class="rounded-sm" /></a>}
                <a href={`/${type}/${t.data.edition}`} class="hover:underline">{t.data.edition}</a>
              </td>
              <td colspan="12" class="py-2">Didn't participate</td>
            </tr>
          );
        }

        const stats = getStatsForTournament(t.data.id);
        const topScorer = getTopScorerInTournament(t.data.id);

        return (
          <tr class="border-b border-green-700 hover:bg-green-900/20">
            <td class="px-2 py-2 flex items-center gap-1 justify-center">
              {hostImage && <a href={`/members/${members.find(m => m.data.name === t.data.host)?.slug}`}><Image src={hostImage} alt={t.data.host} width={20} height={14} class="rounded-sm" /></a>}
              <a href={`/${type}/${t.data.edition}`} class={`${t.data.host === memberName ? 'font-semibold text-amber-400' : ''} hover:underline`}>{t.data.edition}</a>
            </td>
            <td class="px-2 py-2 font-bold">{getTeamFinalResultInTournament(t.data.id)}</td> {/* Placeholder para resultado final */}
            <td class="px-2 py-2 font-black">{getTeamPositionInTournamentById(t.data.id)}°</td> {/* Placeholder para posición */}
            <td class="px-2 py-2">{stats.played}</td>
            <td class="px-2 py-2">{stats.won}</td>
            <td class="px-2 py-2">{stats.draw}</td>
            <td class="px-2 py-2">{stats.lost}</td>
            <td class="px-2 py-2">{stats.goalsFor}</td>
            <td class="px-2 py-2">{stats.goalsAgainst}</td>
            <td class="px-2 py-2">{stats.gd}</td>
            <td class="px-2 py-2 font-bold">{stats.points}</td>
            <td class="px-2 py-2">{stats.pr}</td>
            <td class="px-2 py-2">{topScorer}</td>
          </tr>
        );
      })}
    </tbody>
  </table>
</div>