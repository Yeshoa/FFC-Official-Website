---
// src/components/RankingTable.astro
import type { CollectionEntry } from 'astro:content';
import { Image } from 'astro:assets';
import { getRankedMembers } from '@lib/memberUtils';

interface Props {
  members: CollectionEntry<'members'>[];
}

const { members } = Astro.props;

// Filtrar miembros verificados y calcular puntaje total
const rankedMembers = getRankedMembers(members); // Ordenar por puntaje total descendente
---

<div class="w-full p-6 pt-11 items-center">
  <h1 class="text-6xl font-bold mb-5 text-center animate-sladeIn">Ranking</h1>
  <p class="text-lg mb-10 text-center opacity-0 animate-[slide-in_1s_ease-in-out_forwards_.1s]">Score determines how strong your team will be. More points means higher chances to win.</p>
  <h6 class="md:hidden text-center mb-2">Swipe to see full scores</h6>
  <div class="overflow-x-auto rounded-lg opacity-0 animate-[slide-in_1s_ease-in-out_forwards_.2s]">
    <table class="min-w-7xl table-auto border-collapse text-sm w-max md:w-full max-w-7xl mx-auto">
      <colgroup>
        <col style="width: 20px;"> <!-- Pos -->
        <col style="width: 15px;"> <!-- Flag -->
        <col style="width: 60px;"> <!-- Team -->
        <col style="width: 50px;"> <!-- Hist -->
        <col style="width: 50px;"> <!-- Res -->
        <col style="width: 60px;"> <!-- Last Edition -->
        <col style="width: 60px;"> <!-- Poetry -->
        <col style="width: 50px;"> <!-- Host -->
        <col style="width: 50px;"> <!-- Extra -->
        <col style="width: 70px;"> <!-- Total -->
      </colgroup>
      <thead class="bg-green-800 uppercase">
        <tr>
          <th rowspan="2" class="py-3 text-center border-b border-green-600 rounded-tl-xl" title="Position">Pos</th>
          <th rowspan="2" class="py-3 text-center border-b border-green-600"></th>
          <th rowspan="2" class="py-3 text-left border-b border-green-600">Team</th>
          <th colspan="2" class="px-4 py-2 text-center border-b border-l border-green-600">Roleplay</th>
          <th colspan="2" class="px-4 py-2 text-center border-b border-l border-green-600">Events</th>
          <th colspan="2" class="px-4 py-2 text-center border-b border-l border-green-600">Bonus</th>
          <th rowspan="2" class="px-4 py-3 text-center font-bold border-b border-l border-green-600 rounded-tr-xl">Total</th>
        </tr>
        <tr>
          <th class="px-2 py-2 text-center font-medium border-b border-l border-green-600" title="History Poins">Hist</th>
          <th class="px-2 py-2 text-center font-medium border-b border-l border-green-600" title="Forest Cup 2024 Result">24' Res</th>
          <th class="px-2 py-2 text-center font-medium border-b border-l border-green-600" title="Points gained through events past year">Last Edition</th>
          <th class="px-2 py-2 text-center font-medium border-b border-l border-green-600" title="Poetry Fantasia Score">Poetry</th>
          <th class="px-2 py-2 text-center font-medium border-b border-l border-green-600" title="Host advantage">Host</th>
          <th class="px-2 py-2 text-center font-medium border-b border-l border-green-600" title="Extra points">Extra</th>
        </tr>
      </thead>
      <tbody class="text-center text-green-300">
        {rankedMembers.map((team, index) => {
          const getTotalColorClass = (total: number) => {
            if (total >= 110) return "bg-cyan-500/80 text-black font-bold";
            if (total >= 84) return "bg-red-600/60 text-white font-bold";
            if (total >= 62) return "bg-orange-600/60 text-white font-bold";
            if (total >= 42) return "bg-yellow-600/80 text-white font-bold";
            if (total >= 28) return "bg-green-600/60 text-white font-bold";
            if (total >= 18) return "bg-blue-600/60 text-white font-bold";
            if (total >= 10) return "bg-purple-600/60 text-white font-bold";
            if (total >= 4) return "bg-pink-600/60 text-white font-bold";
            return "bg-gray-600/80 text-white font-bold"; // Color predeterminado para valores < 4
          };
          return (
          <tr class="border-b border-green-700 hover:bg-green-900/30 transition duration-150">
            <td class="py-2">{index + 1}</td>
            <td class="py-2 sticky left-0 z-10 bg-green-900 xl:bg-transparent">
              {/* Usamos el slug guardado en rankedMembers */}
              <Image src={team.flag} alt={team.name} quality={20} format="webp"
                     width={24} height={16} class="h-4 w-auto object-cover rounded inline-block" />
            </td>
            <td class="pl-2 py-2 text-left overflow-hidden text-ellipsis">
              {/* Usamos el slug guardado en rankedMembers */}
              <a href={`/members/${team.slug}`} class="font-semibold hover:underline text-white block overflow-hidden text-ellipsis" title={team.name}>{team.name}</a>
            </td>
            {/* Scores individuales */}
            <td class="px-2 py-2">{team.scores.rpHistory}</td>
            <td class="px-2 py-2">{team.scores.rpResults}</td>
            <td class="px-2 py-2">{team.scores.eventsLastEdition}</td>
            <td class="px-2 py-2">{team.scores.eventsPoetry}</td>
            <td class="px-2 py-2">{team.scores.bonusHost}</td>
            <td class="px-2 py-2">{team.scores.bonusExtra}</td>
            {/* Puntaje Total */}
            <td class={`px-4 py-2 ${getTotalColorClass(team.totalScore)}`}>{team.totalScore}</td>
          </tr>
        )})}
        {rankedMembers.length === 0 && (
            <tr>
                <td colspan="10" class="text-center py-4 text-green-500">No verified members.</td>
            </tr>
        )}
      </tbody>
    </table>
  </div>
  <p class="text-xs text-green-500 mt-4 text-center">

  </p>
</div>
